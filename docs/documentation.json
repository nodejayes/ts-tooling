{
	"id": 0,
	"name": "ts-tooling",
	"kind": 0,
	"flags": {},
	"originalName": "",
	"children": [
		{
			"id": 232,
			"name": "__global",
			"kind": 2,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Here are the Javascript Global interface Extensions defined."
			},
			"children": [
				{
					"id": 318,
					"name": "Array",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "extends the basic Javascript Array"
					},
					"typeParameter": [
						{
							"id": 319,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						}
					],
					"children": [
						{
							"id": 334,
							"name": "Add",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 335,
									"name": "Add",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "add the given element at the end of the list",
										"returns": "the list after element added\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns [1]\n[].Add(1);\n"
											}
										]
									},
									"parameters": [
										{
											"id": 336,
											"name": "element",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the element to add in the list"
											},
											"type": {
												"type": "typeParameter",
												"name": "T"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "T"
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/array/index.ts",
									"line": 132,
									"character": 11
								}
							]
						},
						{
							"id": 337,
							"name": "AddIfNotExists",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 338,
									"name": "AddIfNotExists",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "add the element at the end of the list when the element not exists in the list.",
										"returns": "the list after eventually added element\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns [1,2]\n[1].AddIfNotExists(2);\n// returns [1]\n[1].AddIfNotExists(1);\n"
											}
										]
									},
									"parameters": [
										{
											"id": 339,
											"name": "element",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the element to add in the list"
											},
											"type": {
												"type": "typeParameter",
												"name": "T"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "T"
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/array/index.ts",
									"line": 148,
									"character": 22
								}
							]
						},
						{
							"id": 345,
							"name": "AddRange",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 346,
									"name": "AddRange",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "add multiple elements at the end of this array",
										"returns": "the array after add all elements\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns [1,2,3,4]\n[1].AddRange([2,3,4]);\n"
											}
										]
									},
									"parameters": [
										{
											"id": 347,
											"name": "elements",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the elements to add into this array"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "typeParameter",
													"name": "T"
												}
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "T"
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/array/index.ts",
									"line": 179,
									"character": 16
								}
							]
						},
						{
							"id": 348,
							"name": "AddRangeIfNotExists",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 349,
									"name": "AddRangeIfNotExists",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "add multiple elements at the end of this array when not exists",
										"returns": "the array after add all elements\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns [1,2,3,4]\n[1].AddRangeIfNotExists([2,3,4]);\n// returns [1]\n[1].AddRangeIfNotExists([1,1,1]);\n"
											}
										]
									},
									"parameters": [
										{
											"id": 350,
											"name": "elements",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the elements to add into this array"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "typeParameter",
													"name": "T"
												}
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "T"
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/array/index.ts",
									"line": 195,
									"character": 27
								}
							]
						},
						{
							"id": 419,
							"name": "Any",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 420,
									"name": "Any",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "check if any element is in the array",
										"returns": "array has a element or not\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns true\n[1,2,3].Any();\n// returns false\n[].Any();\n"
											}
										]
									},
									"parameters": [
										{
											"id": 421,
											"name": "condition",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"text": "the condition to search the element"
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												],
												"name": "FindMethod"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/array/index.ts",
									"line": 639,
									"character": 11
								}
							]
						},
						{
							"id": 351,
							"name": "Clear",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 352,
									"name": "Clear",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "remove all Elements from this array",
										"returns": "the empty array\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns []\n[1,2,3].Clear();\n"
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "T"
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/array/index.ts",
									"line": 208,
									"character": 13
								}
							]
						},
						{
							"id": 353,
							"name": "Contains",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 354,
									"name": "Contains",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "check if this array have the given element",
										"returns": "element is in the list or not\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns true\n[1,2,3].Contains(2);\nconst element = {x:'y'};\n[element].Contains(element);\nconst element2 = {hello:'world',Equals:(i) => this.hello === i.hello};\n[element2].Contains(element2);\n// returns false\n[1,2,3].Contains(50);\n[{hello:'world'}].Contains({hello:'world'});\n"
											}
										]
									},
									"parameters": [
										{
											"id": 355,
											"name": "element",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the element to be find"
											},
											"type": {
												"type": "typeParameter",
												"name": "T"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/array/index.ts",
									"line": 229,
									"character": 16
								}
							]
						},
						{
							"id": 439,
							"name": "Convert",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 440,
									"name": "Convert",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "convert all elements of the array into other form",
										"returns": "a new converted array\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns ['Test1', 'Test2', 'Test3']\n[1,2,3].Convert(e => 'Test' + e);\n"
											}
										]
									},
									"typeParameter": [
										{
											"id": 441,
											"name": "K",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {
												"isExported": true
											}
										}
									],
									"parameters": [
										{
											"id": 442,
											"name": "convertMethod",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the method that execute with any element and convert them"
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													},
													{
														"type": "typeParameter",
														"name": "K"
													}
												],
												"name": "ConvertMethod"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "K"
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/array/index.ts",
									"line": 722,
									"character": 15
								}
							]
						},
						{
							"id": 356,
							"name": "Copy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 357,
									"name": "Copy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "get a new instance of the array",
										"returns": "the new instance\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns [1,2,3]\n[1,2,3].Copy();\n"
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "T"
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/array/index.ts",
									"line": 242,
									"character": 12
								}
							]
						},
						{
							"id": 320,
							"name": "Count",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 321,
									"name": "Count",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "get the Number of Items in the Array",
										"returns": "the Number of Elements\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns 3\n[1,2,3].Count();\n// returns 0\n[].Count();\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/array/index.ts",
									"line": 42,
									"character": 13
								}
							]
						},
						{
							"id": 416,
							"name": "ElementAt",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 417,
									"name": "ElementAt",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "get the array element at the given index or null",
										"returns": "the element at the given index\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns 2\n[1,2,3].ElementAt(1);\n"
											}
										]
									},
									"parameters": [
										{
											"id": 418,
											"name": "index",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the index of the element to get from array"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "typeParameter",
										"name": "T"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/array/index.ts",
									"line": 623,
									"character": 17
								}
							]
						},
						{
							"id": 358,
							"name": "Exists",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 359,
									"name": "Exists",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "check if the find Method returns true for a element in the list",
										"returns": "element exists or not\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns true\n[1,2,3].Exists(e => e === 2);\n// returns false\n[1,2,3].Exists(e => e === 20);\n"
											}
										]
									},
									"parameters": [
										{
											"id": 360,
											"name": "condition",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the method executed for each element in the list"
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												],
												"name": "FindMethod"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/array/index.ts",
									"line": 258,
									"character": 14
								}
							]
						},
						{
							"id": 361,
							"name": "Find",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 362,
									"name": "Find",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "find the first element that matches the condition in the array",
										"returns": "the element that matches\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns 2\n[1,2,3].Find((e) => e > 1);\n"
											}
										]
									},
									"parameters": [
										{
											"id": 363,
											"name": "condition",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the method executed for each element in the list"
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												],
												"name": "FindMethod"
											}
										}
									],
									"type": {
										"type": "typeParameter",
										"name": "T"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/array/index.ts",
									"line": 272,
									"character": 12
								}
							]
						},
						{
							"id": 374,
							"name": "FindAll",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 375,
									"name": "FindAll",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "get all elements that match the condition",
										"returns": "a array of matched elements\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns [2,3]\n[1,2,3].FindAll(i => i > 1);\n"
											}
										]
									},
									"parameters": [
										{
											"id": 376,
											"name": "condition",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the method executed for each element in the list"
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												],
												"name": "FindMethod"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "T"
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/array/index.ts",
									"line": 329,
									"character": 15
								}
							]
						},
						{
							"id": 371,
							"name": "FindIndex",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 372,
									"name": "FindIndex",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "get the index number of the first matched element in the array",
										"returns": "the index number\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns 1\n[1,2,3,1,2,3].FindIndex(e => e === 2);\n"
											}
										]
									},
									"parameters": [
										{
											"id": 373,
											"name": "condition",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the method executed for each element in the list"
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												],
												"name": "FindMethod"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/array/index.ts",
									"line": 315,
									"character": 17
								}
							]
						},
						{
							"id": 364,
							"name": "FindLast",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 365,
									"name": "FindLast",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "find the last element that matches the condition in the array",
										"returns": "the element that matches\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns 3\n[1,2,3].FindLast((e) => e > 1);\n"
											}
										]
									},
									"parameters": [
										{
											"id": 366,
											"name": "condition",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the method executed for each element in the list"
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												],
												"name": "FindMethod"
											}
										}
									],
									"type": {
										"type": "typeParameter",
										"name": "T"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/array/index.ts",
									"line": 286,
									"character": 16
								}
							]
						},
						{
							"id": 377,
							"name": "FindLastIndex",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 378,
									"name": "FindLastIndex",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "get the index number of the last matched element in the array",
										"returns": "the index number\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns 4\n[1,2,3,1,2,3].FindLastIndex(e => e === 2);\n"
											}
										]
									},
									"parameters": [
										{
											"id": 379,
											"name": "condition",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the method executed for each element in the list"
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												],
												"name": "FindMethod"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/array/index.ts",
									"line": 343,
									"character": 21
								}
							]
						},
						{
							"id": 422,
							"name": "FirstOrDefault",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 423,
									"name": "FirstOrDefault",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "get the First element of the array or the first that match the condition",
										"text": "when no element was found the default value or null was returned\n",
										"returns": "the element that matches first\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// return 1\n[1,2,3,4,5,6].FirstOrDefault();\n// return 2\n[1,2,3,4,5,6].FirstOrDefault(e => e > 1);\n// return 10\n[1,2,3,4,5,6].FirstOrDefault(() => false, 10);\n"
											}
										]
									},
									"parameters": [
										{
											"id": 424,
											"name": "condition",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"text": "the condition executed ba any array element"
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												],
												"name": "FindMethod"
											}
										},
										{
											"id": 425,
											"name": "def",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"text": "the default value to return"
											},
											"type": {
												"type": "typeParameter",
												"name": "T"
											}
										}
									],
									"type": {
										"type": "typeParameter",
										"name": "T"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/array/index.ts",
									"line": 660,
									"character": 22
								}
							]
						},
						{
							"id": 430,
							"name": "GroupBy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 431,
									"name": "GroupBy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "groups a array of elements by a condition",
										"returns": "the grouped object with splatted arrays from the current array\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns {'1': [1], '2': [2], '3': [3,3,3]}\n[1,2,3,3,3].GroupBy(e => e);\n"
											}
										]
									},
									"parameters": [
										{
											"id": 432,
											"name": "condition",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the condition to group the array"
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												],
												"name": "TransformMethod"
											}
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 433,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExported": true
											},
											"indexSignature": [
												{
													"id": 434,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {
														"isExported": true
													},
													"parameters": [
														{
															"id": 435,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExported": true
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "typeParameter",
															"name": "T"
														}
													}
												}
											],
											"sources": [
												{
													"fileName": "src/types/array/index.ts",
													"line": 694,
													"character": 48
												}
											]
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/array/index.ts",
									"line": 694,
									"character": 15
								}
							]
						},
						{
							"id": 436,
							"name": "GroupKey",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 437,
									"name": "GroupKey",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "groups a array of elements by a condition and returns the group keys",
										"returns": "the grouped keys as string array\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns ['1', '2', '3']\n[1,2,3,3,3].GroupKey(e => e);\n"
											}
										]
									},
									"parameters": [
										{
											"id": 438,
											"name": "condition",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the condition to group the array"
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												],
												"name": "TransformMethod"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/array/index.ts",
									"line": 708,
									"character": 16
								}
							]
						},
						{
							"id": 391,
							"name": "IndexOf",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 392,
									"name": "IndexOf",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "get the array index of a element",
										"returns": "the array index of the target element\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns 1\n[1,2,3,1,2,3].IndexOf(2);\n// returns 4\n[1,2,3,1,2,3].IndexOf(2, 2);\n"
											}
										]
									},
									"parameters": [
										{
											"id": 393,
											"name": "element",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the element to find in the array"
											},
											"type": {
												"type": "typeParameter",
												"name": "T"
											}
										},
										{
											"id": 394,
											"name": "fromIndex",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"text": "the index to skip"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/array/index.ts",
									"line": 406,
									"character": 15
								}
							]
						},
						{
							"id": 383,
							"name": "Insert",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 384,
									"name": "Insert",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "insert a element in the array at a specific position",
										"returns": "the array with inserted element\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns [1,5,2,3]\n[1,2,3].Insert(1, 5);\n"
											}
										]
									},
									"parameters": [
										{
											"id": 385,
											"name": "index",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the position where to insert the element"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 386,
											"name": "element",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the element to insert"
											},
											"type": {
												"type": "typeParameter",
												"name": "T"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "T"
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/array/index.ts",
									"line": 374,
									"character": 14
								}
							]
						},
						{
							"id": 387,
							"name": "InsertRange",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 388,
									"name": "InsertRange",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "insert a array of elements in the array at a specific position",
										"returns": "the array with inserted elements\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns [1,4,5,6,2,3]\n[1,2,3].Insert(1, [4,5,6]);\n"
											}
										]
									},
									"parameters": [
										{
											"id": 389,
											"name": "index",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the position where to insert the element"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 390,
											"name": "elements",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the elements to insert"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "typeParameter",
													"name": "T"
												}
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "T"
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/array/index.ts",
									"line": 389,
									"character": 19
								}
							]
						},
						{
							"id": 443,
							"name": "Join",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 444,
									"name": "Join",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "joins the array elements into a string with separator",
										"returns": "the string with array elements\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns \"1,2,3\"\n[1,2,3].Join(',');\n"
											}
										]
									},
									"parameters": [
										{
											"id": 445,
											"name": "separator",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"text": "the separator to split the array elements in the string"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/array/index.ts",
									"line": 736,
									"character": 12
								}
							]
						},
						{
							"id": 426,
							"name": "LastOrDefault",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 427,
									"name": "LastOrDefault",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "get the last element of the array or the last that match the condition",
										"text": "when no element was found the default value or null was returned\n",
										"returns": "the element that matches last\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// return 6\n[1,2,3,4,5,6].LastOrDefault();\n[1,2,3,4,5,6].LastOrDefault(e => e > 1);\n// return 10\n[1,2,3,4,5,6].LastOrDefault(() => false, 10);\n"
											}
										]
									},
									"parameters": [
										{
											"id": 428,
											"name": "condition",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"text": "the condition executed ba any array element"
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												],
												"name": "FindMethod"
											}
										},
										{
											"id": 429,
											"name": "def",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"text": "the default value to return"
											},
											"type": {
												"type": "typeParameter",
												"name": "T"
											}
										}
									],
									"type": {
										"type": "typeParameter",
										"name": "T"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/array/index.ts",
									"line": 680,
									"character": 21
								}
							]
						},
						{
							"id": 322,
							"name": "Max",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 323,
									"name": "Max",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "get the maximum number in the Array",
										"text": "only number types are checked!!!\n",
										"returns": "the maximum value\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns 3\n[1,2,3].Max();\n// returns 2\n[1,2,3].Max(i => i < 3);\n// returns 4\n[1,2,'3',4,'5'].Max();\n"
											}
										]
									},
									"parameters": [
										{
											"id": 324,
											"name": "filterMethod",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"text": "a filter function to remove some number values"
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												],
												"name": "FindMethod"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/array/index.ts",
									"line": 62,
									"character": 11
								}
							]
						},
						{
							"id": 328,
							"name": "Mean",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 329,
									"name": "Mean",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "get the Mean from all numbers in this array",
										"returns": "the mean value\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns 9.866666666666667\n[1, 25.6, 3].Mean();\n// returns 2\n[1,2,3,4].Mean(i => i < 4);\n// returns 4\n['1','2','3',4,'5'].Mean();\n"
											}
										]
									},
									"parameters": [
										{
											"id": 330,
											"name": "filterMethod",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"text": "a filter function to remove some number values"
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												],
												"name": "FindMethod"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/array/index.ts",
									"line": 100,
									"character": 12
								}
							]
						},
						{
							"id": 325,
							"name": "Min",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 326,
									"name": "Min",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "get the minimum number in the Array",
										"text": "only number types are checked!!!\n",
										"returns": "the minimum value\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns 3\n[1,2,3].Min();\n// returns 2\n[1,2,3].Min(i => i > 1);\n// returns 4\n['1','2','3',4,'5'].Min();\n"
											}
										]
									},
									"parameters": [
										{
											"id": 327,
											"name": "filterMethod",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"text": "a filter function to remove some number values"
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												],
												"name": "FindMethod"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/array/index.ts",
									"line": 82,
									"character": 11
								}
							]
						},
						{
							"id": 340,
							"name": "Reduce",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 341,
									"name": "Reduce",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "shrink the array into a new object with a convert function.",
										"returns": "the shrinked object\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns \"a,b,c\"\n['a', 'b', 'c'].Reduce((target, e) => {\n     return target.Concat(e, ',');\n }, '')\n"
											}
										]
									},
									"typeParameter": [
										{
											"id": 342,
											"name": "K",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {
												"isExported": true
											}
										}
									],
									"parameters": [
										{
											"id": 343,
											"name": "reducer",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the reducer function to convert each array element"
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													},
													{
														"type": "typeParameter",
														"name": "K"
													}
												],
												"name": "ReducerMethod"
											}
										},
										{
											"id": 344,
											"name": "initial",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the initial value pass to each element"
											},
											"type": {
												"type": "typeParameter",
												"name": "K"
											}
										}
									],
									"type": {
										"type": "typeParameter",
										"name": "K"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/array/index.ts",
									"line": 165,
									"character": 14
								}
							]
						},
						{
							"id": 395,
							"name": "Remove",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 396,
									"name": "Remove",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "remove a element from the list",
										"returns": "the array without the element to remove\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns [1,3]\n[1,2,3].Remove(2);\n"
											}
										]
									},
									"parameters": [
										{
											"id": 397,
											"name": "element",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the element to remove from the list"
											},
											"type": {
												"type": "typeParameter",
												"name": "T"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "T"
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/array/index.ts",
									"line": 420,
									"character": 14
								}
							]
						},
						{
							"id": 398,
							"name": "RemoveAll",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 399,
									"name": "RemoveAll",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "remove all elements that match the given condition",
										"returns": "the array without the condition matching elements\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// return [1,3]\n[1,2,3].RemoveAll(e => e === 2);\n// return []\n[1,2,3].RemoveAll(() => true);\n"
											}
										]
									},
									"parameters": [
										{
											"id": 400,
											"name": "match",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the condition executed by any element in the array"
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												],
												"name": "FindMethod"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "T"
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/array/index.ts",
									"line": 436,
									"character": 17
								}
							]
						},
						{
							"id": 401,
							"name": "RemoveAt",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 402,
									"name": "RemoveAt",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "remove element at specific position",
										"returns": "the array without the element to remove\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns [1,3]\n[1,2,3].RemoveAt(1);\n"
											}
										]
									},
									"parameters": [
										{
											"id": 403,
											"name": "index",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the position where the element was removed"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "T"
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/array/index.ts",
									"line": 450,
									"character": 16
								}
							]
						},
						{
							"id": 404,
							"name": "RemoveRange",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 405,
									"name": "RemoveRange",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "remove multiple elements from the array",
										"returns": "the array without the elements to remove\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns [1,2,3]\n[1,2,3,4,5,6].RemoveRange([4,5,6]);\n[1,2,3].RemoveRange([4,5,6]);\n"
											}
										]
									},
									"parameters": [
										{
											"id": 406,
											"name": "elements",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the elements to remove from the array"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "typeParameter",
													"name": "T"
												}
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "T"
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/array/index.ts",
									"line": 465,
									"character": 19
								}
							]
						},
						{
							"id": 367,
							"name": "Replace",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 368,
									"name": "Replace",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "replace a Item in the List takes the first match",
										"returns": "the list with the inserted Item\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns [1,2,3]\n[1,5,3].Replace((e) => e === 5, 2);\n"
											}
										]
									},
									"parameters": [
										{
											"id": 369,
											"name": "condition",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the method executed for each element in the list"
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												],
												"name": "FindMethod"
											}
										},
										{
											"id": 370,
											"name": "item",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the Item to replace with"
											},
											"type": {
												"type": "typeParameter",
												"name": "T"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "T"
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/array/index.ts",
									"line": 301,
									"character": 15
								}
							]
						},
						{
							"id": 407,
							"name": "Reverse",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 408,
									"name": "Reverse",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "turn around the array elements",
										"returns": "the reverse of the array\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns [3,2,1]\n[1,2,3].Reverse();\n"
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "T"
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/array/index.ts",
									"line": 478,
									"character": 15
								}
							]
						},
						{
							"id": 409,
							"name": "Sort",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 410,
									"name": "Sort",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "sort the elements in a array",
										"returns": "the sorted array\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns [1, 2, 3]\n[1, 2, 3].Sort();\n// returns [3, 2, 1]\n[1, 2, 3].Sort(ListSortOrder.DESC);\n// returns ['c', 'b', 'a']\n['a', 'b', 'c'].Sort(ListSortOrder.DESC);\n"
											}
										]
									},
									"parameters": [
										{
											"id": 411,
											"name": "order",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"text": "the direction to sort the array elements"
											},
											"type": {
												"type": "reference",
												"id": 289,
												"name": "ListSortOrder"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "T"
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/array/index.ts",
									"line": 496,
									"character": 12
								}
							]
						},
						{
							"id": 412,
							"name": "SortBy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 413,
									"name": "SortBy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "sort a array of objects by the given keys",
										"returns": "the sorted list of objects\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns [\n// {\n//       Name: 'Anne Klein',\n//       Age: 23,\n//       Birthday: new Date(1965, 8, 12, 0, 0, 0),\n//       Address: {\n//           Street: 'Jenaer Strasse 26',\n//           PLZ: '47053',\n//           Town: 'Duisburg',\n//       }\n//   },{\n//       Name: 'Christine Ehrlichmann',\n//       Age: 37,\n//       Birthday: new Date(1982, 4, 23, 0, 0, 0),\n//       Address: {\n//           Street: 'Paul-Nevermann-Platz 59',\n//           PLZ: '97657',\n//           Town: 'Sandberg'\n//       }\n//   },{\n//       Name: 'Jonas Schreiner',\n//       Age: 23,\n//       Birthday: new Date(1965, 4, 12, 0, 0, 0),\n//       Address: {\n//           Street: 'Gotthardstrasse 69',\n//           PLZ: '99094',\n//           Town: 'Erfurt'\n//       }\n//   },{\n//       Name: 'Sandra Eichmann',\n//       Age: 45,\n//       Birthday: new Date(1969, 0, 22, 0, 0, 0),\n//       Address: {\n//           Street: 'Inge Beisheim Platz 20',\n//           PLZ: '25313',\n//           Town: 'Elmshorn'\n//       }\n//   },{\n//       Name: 'Ulrich Gärtner',\n//       Age: 60,\n//       Birthday: new Date(1959, 2, 23, 0, 0, 0),\n//       Address: {\n//           Street: 'Koenigstrasse 50',\n//           PLZ: '99750',\n//           Town: 'Bleicherode'\n//       }\n//   }\n// ]\n[\n   {\n          Name: 'Jonas Schreiner',\n          Age: 23,\n          Birthday: new Date(1965, 4, 12, 0, 0, 0),\n          Address: {\n              Street: 'Gotthardstrasse 69',\n              PLZ: '99094',\n              Town: 'Erfurt'\n          }\n      },\n   {\n          Name: 'Sandra Eichmann',\n          Age: 45,\n          Birthday: new Date(1969, 0, 22, 0, 0, 0),\n          Address: {\n              Street: 'Inge Beisheim Platz 20',\n              PLZ: '25313',\n              Town: 'Elmshorn'\n          }\n      },\n   {\n          Name: 'Ulrich Gärtner',\n          Age: 60,\n          Birthday: new Date(1959, 2, 23, 0, 0, 0),\n          Address: {\n              Street: 'Koenigstrasse 50',\n              PLZ: '99750',\n              Town: 'Bleicherode'\n          }\n      },\n   {\n          Name: 'Christine Ehrlichmann',\n          Age: 37,\n          Birthday: new Date(1982, 4, 23, 0, 0, 0),\n          Address: {\n              Street: 'Paul-Nevermann-Platz 59',\n              PLZ: '97657',\n              Town: 'Sandberg'\n          }\n      },\n   {\n          Name: 'Anne Klein',\n          Age: 23,\n          Birthday: new Date(1965, 8, 12, 0, 0, 0),\n          Address: {\n              Street: 'Jenaer Strasse 26',\n              PLZ: '47053',\n              Town: 'Duisburg',\n          }\n      }\n   ].SortBy(['Name'], [ListSortOrder.ASC]);\n"
											}
										]
									},
									"parameters": [
										{
											"id": 414,
											"name": "keys",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "a list of keys to sort with"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										},
										{
											"id": 415,
											"name": "orders",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"text": "the sort direction to the keys"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 289,
													"name": "ListSortOrder"
												}
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "T"
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/array/index.ts",
									"line": 609,
									"character": 14
								}
							]
						},
						{
							"id": 331,
							"name": "Sum",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 332,
									"name": "Sum",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "get the Sum from all numbers in this array",
										"returns": "the sum value\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns 6\n[1,2,3].Sum();\n// returns 5\n[1,2,3].Sum(i => i > 1);\n// returns 4\n['1','2','3',4,'5'].Sum();\n"
											}
										]
									},
									"parameters": [
										{
											"id": 333,
											"name": "filterMethod",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"text": "a filter function to remove some number values"
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												],
												"name": "FindMethod"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/array/index.ts",
									"line": 118,
									"character": 11
								}
							]
						},
						{
							"id": 380,
							"name": "TrueForAll",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 381,
									"name": "TrueForAll",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "check if a condition returns true for any element in the array",
										"returns": "condition is true for all elements or not\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns true\n[1,2,3].TrueForAll(e => typeof e === typeof 0);\n// returns false\n[1,2,3].TrueForAll(e => e === 1);\n"
											}
										]
									},
									"parameters": [
										{
											"id": 382,
											"name": "condition",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the method to check each element"
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												],
												"name": "FindMethod"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/array/index.ts",
									"line": 359,
									"character": 18
								}
							]
						},
						{
							"id": 446,
							"name": "UnionBy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 447,
									"name": "UnionBy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "merge two arrays by the condition",
										"returns": "the merged array\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns [1,2,3,6]\n[1,2,3].UnionBy([4,5,6], e => e === 6);\n"
											}
										]
									},
									"typeParameter": [
										{
											"id": 448,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {
												"isExported": true
											}
										}
									],
									"parameters": [
										{
											"id": 449,
											"name": "items",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the items to add at the end of the array"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "typeParameter",
													"name": "T"
												}
											}
										},
										{
											"id": 450,
											"name": "check",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the condition that executed by the given items"
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												],
												"name": "FindMethod"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "typeParameter",
											"name": "T"
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/array/index.ts",
									"line": 751,
									"character": 15
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								334,
								337,
								345,
								348,
								419,
								351,
								353,
								439,
								356,
								320,
								416,
								358,
								361,
								374,
								371,
								364,
								377,
								422,
								430,
								436,
								391,
								383,
								387,
								443,
								426,
								322,
								328,
								325,
								340,
								395,
								398,
								401,
								404,
								367,
								407,
								409,
								412,
								331,
								380,
								446
							],
							"categories": [
								{
									"title": "array",
									"children": [
										334,
										337,
										345,
										348,
										419,
										351,
										353,
										439,
										356,
										320,
										416,
										358,
										361,
										374,
										371,
										364,
										377,
										422,
										430,
										436,
										391,
										383,
										387,
										443,
										426,
										322,
										328,
										325,
										340,
										395,
										398,
										401,
										404,
										367,
										407,
										409,
										412,
										331,
										380,
										446
									]
								}
							]
						}
					],
					"sources": [
						{
							"fileName": "src/types/array/index.ts",
							"line": 28,
							"character": 19
						}
					]
				},
				{
					"id": 233,
					"name": "Number",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "extends the basic Javascript Number"
					},
					"children": [
						{
							"id": 251,
							"name": "Add",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 252,
									"name": "Add",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Add the current number to the given number.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```\n// returns 2\n(1).Add(1);\n// returns 3\n(1).Add(1).Add(1);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 253,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the Number to add to the current Number\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/number/index.ts",
									"line": 101,
									"character": 11
								}
							]
						},
						{
							"id": 275,
							"name": "Ceil",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 276,
									"name": "Ceil",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Rounding up a number",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns 5\n4.006.Ceil();\n// returns 6.01\n6.004.Ceil(2);\n// returns 6100\n(6040).Ceil(-2);\n"
											}
										]
									},
									"parameters": [
										{
											"id": 277,
											"name": "precision",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"text": "Number of digits used for rounding\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/number/index.ts",
									"line": 213,
									"character": 12
								}
							]
						},
						{
							"id": 247,
							"name": "Clamp",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 248,
									"name": "Clamp",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Sets the value of the number to the lower or upper limit if the number is greater or smaller than the opere or lower limit.",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns 10\n(20).Clamp(1, 10);\n(10).Clamp(1, 10);\n// returns 9\n(9).Clamp(1, 10);\n// returns 1\n(1).Clamp(1, 10);\n(0.5).Clamp(1, 10);\n"
											}
										]
									},
									"parameters": [
										{
											"id": 249,
											"name": "lower",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the lower limit"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 250,
											"name": "upper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the upper limit\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/number/index.ts",
									"line": 86,
									"character": 13
								}
							]
						},
						{
							"id": 280,
							"name": "DecimalPlaces",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 281,
									"name": "DecimalPlaces",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Number of digits after the decimal point",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns 0\n(1).DecimalPlaces();\n// returns 1\n(1.5).DecimalPlaces();\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/number/index.ts",
									"line": 236,
									"character": 21
								}
							]
						},
						{
							"id": 266,
							"name": "Decrement",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 267,
									"name": "Decrement",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "decreases the number by 1 or the value that was given.",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns 4\n(5).Decrement();\n// returns 1\n(5).Decrement(4);\n"
											}
										]
									},
									"parameters": [
										{
											"id": 268,
											"name": "step",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"text": "Number to be decremented by\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/number/index.ts",
									"line": 168,
									"character": 17
								}
							]
						},
						{
							"id": 260,
							"name": "Divide",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 261,
									"name": "Divide",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Divides the current number with the given number.",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns 5\n(10).Divide(2);\n// returns 5\n(20). Divide(2).Divide(2);\n// throws an Error\n(10).Divide(0);\n"
											}
										]
									},
									"parameters": [
										{
											"id": 262,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the Number to multiply from the current Number\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/number/index.ts",
									"line": 142,
									"character": 14
								}
							]
						},
						{
							"id": 238,
							"name": "Equals",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 239,
									"name": "Equals",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Checks if a number is equal to the current number.",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns true\n(1).Equals(1)\n// returns false\n(1).Equals(2)\n"
											}
										]
									},
									"parameters": [
										{
											"id": 240,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the Number to check again the current Number\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/number/index.ts",
									"line": 40,
									"character": 14
								}
							]
						},
						{
							"id": 272,
							"name": "Floor",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 273,
									"name": "Floor",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Rounding off a number",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns 4\n4.006.Floor();\n// returns 0.04\n0.046.Floor(2);\n// returns 4000\n(4060).Floor(-2);\n"
											}
										]
									},
									"parameters": [
										{
											"id": 274,
											"name": "precision",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"text": "Number of digits used for rounding\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/number/index.ts",
									"line": 198,
									"character": 13
								}
							]
						},
						{
							"id": 263,
							"name": "Increment",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 264,
									"name": "Increment",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "increases the number by 1 or the value that was given.",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns 2\n(1).Increment();\n// returns 5\n(1).Increment(4);\n"
											}
										]
									},
									"parameters": [
										{
											"id": 265,
											"name": "step",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"text": "Number to be incremented by\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/number/index.ts",
									"line": 155,
									"character": 17
								}
							]
						},
						{
							"id": 241,
							"name": "IsAbove",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 242,
									"name": "IsAbove",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Checks if a number is greater than the current number.",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns true\n(1).IsAbove(0)\n// returns false\n(1).IsAbove(1)\n(1).IsAbove(5)\n"
											}
										]
									},
									"parameters": [
										{
											"id": 243,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the Number to check again the current Number\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/number/index.ts",
									"line": 54,
									"character": 15
								}
							]
						},
						{
							"id": 244,
							"name": "IsBelow",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 245,
									"name": "IsBelow",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Checks if a number is lower than the current number.",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns true\n(1).IsBelow(5)\n// returns false\n(1).IsBelow(1)\n(1).IsBelow(0)\n"
											}
										]
									},
									"parameters": [
										{
											"id": 246,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the Number to check again the current Number\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/number/index.ts",
									"line": 68,
									"character": 15
								}
							]
						},
						{
							"id": 234,
							"name": "IsInRange",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 235,
									"name": "IsInRange",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Checks if a number is within 2 limits.",
										"text": "The limit values are included!\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns true\n1.2.IsInRange(1.0, 2.0);\n1.0.IsInRange(1.0, 2.0);\n2.0.IsInRange(1.0, 2.0);\n// returns false\n5.2.IsInRange(1.0, 2.0)\n"
											}
										]
									},
									"parameters": [
										{
											"id": 236,
											"name": "lower",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the lower limit"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 237,
											"name": "upper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the upper limit\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/number/index.ts",
									"line": 27,
									"character": 17
								}
							]
						},
						{
							"id": 257,
							"name": "Multiply",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 258,
									"name": "Multiply",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Multiplies the current number by the given number.",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns 10\n(1).Multiply(10);\n// returns 20\n(1).Multiply(10).Multiply(2);\n"
											}
										]
									},
									"parameters": [
										{
											"id": 259,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the Number to multiply from the current Number\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/number/index.ts",
									"line": 127,
									"character": 16
								}
							]
						},
						{
							"id": 278,
							"name": "Numerals",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 279,
									"name": "Numerals",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "number of digits before the decimal point",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns 1\n(1.5).Numerals();\n(1).Numerals();\n// returns 2\n(10).Numerals();\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/number/index.ts",
									"line": 225,
									"character": 16
								}
							]
						},
						{
							"id": 269,
							"name": "Round",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 270,
									"name": "Round",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Rounds a number up or down if the next digit is greater than or equal to 5.",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns 4\n4.006.Round();\n// returns 4.01\n4.006.Round(2);\n// returns 4100\n(4060).Round(-2);\n"
											}
										]
									},
									"parameters": [
										{
											"id": 271,
											"name": "precision",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"text": "Number of digits used for rounding\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/number/index.ts",
									"line": 183,
									"character": 13
								}
							]
						},
						{
							"id": 254,
							"name": "Subtract",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 255,
									"name": "Subtract",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Subtracts the current number with the given number.",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns 1\n(2).Subtract(1);\n// returns 0\n(2).Subtract(1).Subtract(1);\n"
											}
										]
									},
									"parameters": [
										{
											"id": 256,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the Number to subtract from the current Number\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/number/index.ts",
									"line": 114,
									"character": 16
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								251,
								275,
								247,
								280,
								266,
								260,
								238,
								272,
								263,
								241,
								244,
								234,
								257,
								278,
								269,
								254
							]
						}
					],
					"sources": [
						{
							"fileName": "src/types/number/index.ts",
							"line": 10,
							"character": 20
						}
					]
				},
				{
					"id": 451,
					"name": "String",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "extends the basic Javascript String"
					},
					"children": [
						{
							"id": 600,
							"name": "Bytes",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 601,
									"name": "Bytes",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "get the String Length in Bytes",
										"returns": "the Byte Length\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns 3\n'ABC'.Bytes();\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/string/index.ts",
									"line": 824,
									"character": 13
								}
							]
						},
						{
							"id": 455,
							"name": "Capitalize",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 456,
									"name": "Capitalize",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Converts a string so that the first letter of the string is capital and all others are small.",
										"returns": "the capitalized String\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// retruns \"Hello\"\n'hello'.Capitalize();\n'HELLO'.Capitalize();\n'Hello'.Capitalize();\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/string/index.ts",
									"line": 41,
									"character": 18
								}
							]
						},
						{
							"id": 452,
							"name": "CharAt",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 453,
									"name": "CharAt",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Returns a letter of a string at a certain position.",
										"returns": "the Letter at the Position\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns \"H\"\n'Hello'.CharAt(0);\n// returns \"o\"\n'Hello'.CharAt(4);\n// throws an Error while string has not enough letters\n'Hello'.CharAt(5);\n"
											}
										]
									},
									"parameters": [
										{
											"id": 454,
											"name": "pos",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "The index of the letter to be returned."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/string/index.ts",
									"line": 26,
									"character": 14
								}
							]
						},
						{
							"id": 510,
							"name": "Concat",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 511,
									"name": "Concat",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "concat 2 strings",
										"returns": "the concated string\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns \"ab\"\n'a'.Concat('b');\n// returns \"a#b\"\n'a'.Concat('b', '#');\n"
											}
										]
									},
									"parameters": [
										{
											"id": 512,
											"name": "appender",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the string to append"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 513,
											"name": "separator",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"text": "a template string that separates each concat string member"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/string/index.ts",
									"line": 384,
									"character": 14
								}
							]
						},
						{
							"id": 564,
							"name": "Contains",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 565,
									"name": "Contains",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "checks if a string is in the current string.",
										"returns": "search string is in this string or not\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns true\n'abbbc'.Contains('b');\n'abbbc'.Contains('bbb');\n// returns false\n'abbbc'.Contains('xxx');\n"
											}
										]
									},
									"parameters": [
										{
											"id": 566,
											"name": "search",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the string to find in this string"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/string/index.ts",
									"line": 637,
									"character": 16
								}
							]
						},
						{
							"id": 567,
							"name": "ContainsCount",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 568,
									"name": "ContainsCount",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "returns the number of occurrences of the search string.",
										"returns": "the number of matches\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns 3\n'zzabcabcabczz'.ContainsCount('a');\n// returns 2\n'zzabcabcabczz'.ContainsCount('cabc', true);\n"
											}
										]
									},
									"parameters": [
										{
											"id": 569,
											"name": "search",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the string to find in this string"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 570,
											"name": "allowOverlapping",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"text": "allow overlapping search"
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/string/index.ts",
									"line": 654,
									"character": 21
								}
							]
						},
						{
							"id": 562,
							"name": "Copy",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 563,
									"name": "Copy",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "clones the current String into a new one",
										"returns": "a new Instance of a String\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns a new Instance \"Test\"\n'Test'.Copy();\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/string/index.ts",
									"line": 620,
									"character": 12
								}
							]
						},
						{
							"id": 461,
							"name": "EndsWith",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 462,
									"name": "EndsWith",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "checks whether a string ends with a character string.",
										"returns": "the string ends with the search\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns true\n'abcdefg'.EndsWith('efg');\n'abcdefg'.EndsWith('f', 6);\n// returns false\n'abcdefg'.EndsWith('f', 1);\n'abcdefg'.EndsWith('z');\n"
											}
										]
									},
									"parameters": [
										{
											"id": 463,
											"name": "search",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the string with which the string should end"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 464,
											"name": "position",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"text": "an offset parameter"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/string/index.ts",
									"line": 79,
									"character": 16
								}
							]
						},
						{
							"id": 571,
							"name": "Equals",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 572,
									"name": "Equals",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "check if this String strict the same as the given string",
										"returns": "are both strings the same\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns true\n'Test'.Equals('Test');\n// returns false\n'Test'.Equals('test');\n"
											}
										]
									},
									"parameters": [
										{
											"id": 573,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the other string to compare with"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/string/index.ts",
									"line": 670,
									"character": 14
								}
							]
						},
						{
							"id": 465,
							"name": "HTMLEscape",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 466,
									"name": "HTMLEscape",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "escape to a HTML safe string",
										"returns": "a escaped HTML String\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns \"fred, barney, &amp; pebbles\"\n'fred, barney, & pebbles'.HTMLEscape();\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/string/index.ts",
									"line": 92,
									"character": 18
								}
							]
						},
						{
							"id": 467,
							"name": "HTMLUnescape",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 468,
									"name": "HTMLUnescape",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "unescape a escaped HTML String",
										"returns": "a unescaped HTML String\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns \"fred, barney, & pebbles\"\n'fred, barney, &amp; pebbles'.HTMLUnescape();\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/string/index.ts",
									"line": 105,
									"character": 20
								}
							]
						},
						{
							"id": 586,
							"name": "IndexOf",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 587,
									"name": "IndexOf",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "get the position of the first match in this string",
										"returns": "the position index\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns 0\n'aaaaa'.IndexOf('a');\n// returns 1\n'abc'.IndexOf('b');\n// returns -1\n'abc'.IndexOf('z');\n"
											}
										]
									},
									"parameters": [
										{
											"id": 588,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the string to search in this string"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/string/index.ts",
									"line": 747,
									"character": 15
								}
							]
						},
						{
							"id": 574,
							"name": "Insert",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 575,
									"name": "Insert",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "insert a string into this string on a specific position",
										"returns": "the combined string\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns \"axbc\"\n'abc'.Insert(1, 'x');\n// returns \"xabc\"\n'abc'.Insert(-1, 'x');\n// returns \"abcx\"\n'abc'.Insert(100, 'x');\n"
											}
										]
									},
									"parameters": [
										{
											"id": 576,
											"name": "startIndex",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the position where the string was added"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 577,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the string value to insert"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/string/index.ts",
									"line": 689,
									"character": 14
								}
							]
						},
						{
							"id": 598,
							"name": "IsAlpha",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 599,
									"name": "IsAlpha",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "check if this string only have alphabetical letters without \"ß\"",
										"returns": "has only alphabetical letters or not\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns true\n'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.IsAlpha();\n// returns false\n'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1'.IsAlpha();\n'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZß'.IsAlpha();\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/string/index.ts",
									"line": 811,
									"character": 15
								}
							]
						},
						{
							"id": 596,
							"name": "IsAscii",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 597,
									"name": "IsAscii",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "check if this string only contains Ascii letters",
										"returns": "has only Ascii letters or not\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns true\n'ABCD'.IsAscii();\n// returns false\n'©'.IsAscii();\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/string/index.ts",
									"line": 795,
									"character": 15
								}
							]
						},
						{
							"id": 514,
							"name": "Join",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 515,
									"name": "Join",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "same as Concat only with multiple strings.",
										"returns": "the joinded string\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns \"testabc\"\n'test'.Join(['a','b','c']);\n// returns \"test#a#b#c\"\n'test'.Join(['a','b','c'], '#');\n// returns \"a#b#c\"\n''.Join(['a','b','c'], '#');\n"
											}
										]
									},
									"parameters": [
										{
											"id": 516,
											"name": "appender",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the strings to append at the end"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										},
										{
											"id": 517,
											"name": "separator",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"text": "a template string that separates each concat string member"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/string/index.ts",
									"line": 403,
									"character": 12
								}
							]
						},
						{
							"id": 589,
							"name": "LastIndexOf",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 590,
									"name": "LastIndexOf",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "get the position of the last match in this string",
										"returns": "the position index\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns 4\n'aaaaa'.LastIndexOf('a');\n// returns 1\n'abc'.LastIndexOf('b');\n// returns -1\n'abc'.LastIndexOf('z');\n"
											}
										]
									},
									"parameters": [
										{
											"id": 591,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the string to search in this string"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/string/index.ts",
									"line": 765,
									"character": 19
								}
							]
						},
						{
							"id": 499,
							"name": "LowerFirst",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 500,
									"name": "LowerFirst",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "convert the first letter of the string into lower case",
										"returns": "the new string with the lower case first letter\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns \"hello\"\n'Hello'.LowerFirst();\n'hello'.LowerFirst();\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/string/index.ts",
									"line": 330,
									"character": 18
								}
							]
						},
						{
							"id": 518,
							"name": "Pad",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 519,
									"name": "Pad",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "fills a string alternately from left and right.",
										"returns": "the padded string\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns \"_-abc_-_\"\n'abc'.Pad(8, '_-');\n// returns \"  abc   \"\n'abc'.Pad(8);\n// returns \"abcdefg\"\n'abcdefg'.Pad(3, '-');\n"
											}
										]
									},
									"parameters": [
										{
											"id": 520,
											"name": "length",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "Specifies how long the string should be"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 521,
											"name": "template",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"text": "the string to be inserted"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/string/index.ts",
									"line": 422,
									"character": 11
								}
							]
						},
						{
							"id": 522,
							"name": "PadLeft",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 523,
									"name": "PadLeft",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "fills a string from left.",
										"returns": "the padded string\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns \"__abc\"\n'abc'.PadLeft(5, '_');\n// returns \"  abc\"\n'abc'.PadLeft(5);\n// returns \"abcdefg\"\n'abcdefg'.PadLeft(3, '-');\n"
											}
										]
									},
									"parameters": [
										{
											"id": 524,
											"name": "length",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "Specifies how long the string should be"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 525,
											"name": "template",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"text": "the string to be inserted"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/string/index.ts",
									"line": 441,
									"character": 15
								}
							]
						},
						{
							"id": 526,
							"name": "PadRight",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 527,
									"name": "PadRight",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "fills a string from right.",
										"returns": "the padded string\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns \"abc__\"\n'abc'.PadRight(5, '_');\n// returns \"abc  \"\n'abc'.PadRight(5);\n// returns \"abcdefg\"\n'abcdefg'.PadRight(3, '-');\n"
											}
										]
									},
									"parameters": [
										{
											"id": 528,
											"name": "length",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "Specifies how long the string should be"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 529,
											"name": "template",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"text": "the string to be inserted"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/string/index.ts",
									"line": 460,
									"character": 16
								}
							]
						},
						{
							"id": 469,
							"name": "RegExpEscape",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 470,
									"name": "RegExpEscape",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "escape a String used for Regular Expression",
										"returns": "a escaped Regular Expression\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns \"\\[lodash\\]\\(https://lodash\\.com/\\)\"\n'[lodash](https://lodash.com/)'.RegExpEscape();\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/string/index.ts",
									"line": 118,
									"character": 20
								}
							]
						},
						{
							"id": 578,
							"name": "Remove",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 579,
									"name": "Remove",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "remove a number of characters from the position in this string",
										"returns": "the cleaned string\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns \"abc\"\n'axbc'.Remove(1);\n// returns \"a\"\n'axbc'.Remove(1, 3);\n// returns \"\"\n'abc'.Remove(10, 5);\n"
											}
										]
									},
									"parameters": [
										{
											"id": 580,
											"name": "position",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the position from where the characters was removed"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 581,
											"name": "count",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"text": "the number of characters to remove"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/string/index.ts",
									"line": 708,
									"character": 14
								}
							]
						},
						{
							"id": 530,
							"name": "Repeat",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 531,
									"name": "Repeat",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "repeat the current string x times",
										"returns": "repeated string\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns \"*****\"\n'*'.Repeat(5);\n"
											}
										]
									},
									"parameters": [
										{
											"id": 532,
											"name": "times",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "how many repeats"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/string/index.ts",
									"line": 474,
									"character": 14
								}
							]
						},
						{
							"id": 533,
							"name": "Replace",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 534,
									"name": "Replace",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "replace the first match on the current String",
										"returns": "the replaced string\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns \"azcdefg\"\n'abcdefg'.Replace('b', 'z');\n// returns \"azbcdefg\"\n'abbcdefg'.Replace('b', 'z');\n"
											}
										]
									},
									"parameters": [
										{
											"id": 535,
											"name": "search",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the pattern to search on the string"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 536,
											"name": "replacer",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the string that replaces the found string"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/string/index.ts",
									"line": 491,
									"character": 15
								}
							]
						},
						{
							"id": 537,
							"name": "ReplaceAll",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 538,
									"name": "ReplaceAll",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "replace all matches on the current String",
										"returns": "the replaced string\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns \"azzzcdezfg\"\n'abbbcdebfg'.ReplaceAll('b', 'z');\n"
											}
										]
									},
									"parameters": [
										{
											"id": 539,
											"name": "search",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the pattern to search on the string"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 540,
											"name": "replacer",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the string that replaces the found string"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/string/index.ts",
									"line": 506,
									"character": 18
								}
							]
						},
						{
							"id": 541,
							"name": "Split",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 542,
									"name": "Split",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "split a string by a pattern into a Array",
										"returns": "the splitted array\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns ['bbbb', 'bbb', 'c']\n'abbbbabbbac'.Split('a');\n"
											}
										]
									},
									"parameters": [
										{
											"id": 543,
											"name": "pattern",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the template string to split the string"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/string/index.ts",
									"line": 520,
									"character": 13
								}
							]
						},
						{
							"id": 457,
							"name": "StartsWith",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 458,
									"name": "StartsWith",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "checks whether a string begins with a character string.",
										"returns": "the string begins with the string\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns true\n'abcdefg'.StartsWith('abc');\n'abcdefg'.StartsWith('b', 1);\n// returns false\n'abcdefg'.StartsWith('b', 2);\n'abcdefg'.StartsWith('z');\n"
											}
										]
									},
									"parameters": [
										{
											"id": 459,
											"name": "search",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the string with which the string should begin"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 460,
											"name": "position",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"text": "an offset parameter"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/string/index.ts",
									"line": 60,
									"character": 18
								}
							]
						},
						{
							"id": 582,
							"name": "Substring",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 583,
									"name": "Substring",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "get a part of this string",
										"returns": "the string part\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns \"_\"\n'___Test'.Substring(0);\n// returns \"Test\"\n'___Test'.Substring(3, 4);\n// return \"Te\"\n'Test'.Substring(-1, 2);\n// return \"st\"\n'Test'.Substring(100, 2);\n"
											}
										]
									},
									"parameters": [
										{
											"id": 584,
											"name": "position",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the position to start"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 585,
											"name": "length",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"text": "the number of characters to get from string"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/string/index.ts",
									"line": 729,
									"character": 17
								}
							]
						},
						{
							"id": 592,
							"name": "TextBetween",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 593,
									"name": "TextBetween",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "found text between 2 text marks and returns the results as string array",
										"returns": "the texts between the text marks\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns \"betweenmodule\"\n'beforemodule@NgModule({betweenmodule})aftermodule'.TextBetween('@NgModule({', '})');\n"
											}
										]
									},
									"parameters": [
										{
											"id": 594,
											"name": "begin",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the first text mark"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 595,
											"name": "end",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the second text mark"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/string/index.ts",
									"line": 780,
									"character": 19
								}
							]
						},
						{
							"id": 475,
							"name": "ToCamelCase",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 476,
									"name": "ToCamelCase",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Converts a string into the Camel Case format.",
										"returns": "the Camel Case String\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns \"fooBar\"\n'Foo Bar'.ToCamelCase()\n'--foo-bar--'.ToCamelCase()\n'__FOO_BAR__'.ToCamelCase()\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/string/index.ts",
									"line": 167,
									"character": 19
								}
							]
						},
						{
							"id": 479,
							"name": "ToCapitalCase",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 480,
									"name": "ToCapitalCase",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Transform into a space separated string with each word capitalized.",
										"returns": "the Capital Case String\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns \"Test String\"\n'test string'.ToCapitalCase();\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/string/index.ts",
									"line": 195,
									"character": 21
								}
							]
						},
						{
							"id": 481,
							"name": "ToConstantCase",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 482,
									"name": "ToConstantCase",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Transform into upper case string with an underscore between words.",
										"returns": "the Constant Case String\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns \"TEST_STRING\"\n'test string'.ToConstantCase();\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/string/index.ts",
									"line": 208,
									"character": 22
								}
							]
						},
						{
							"id": 483,
							"name": "ToDotCase",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 484,
									"name": "ToDotCase",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Transform into a lower case string with a period between words.",
										"returns": "the Dot Case String\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns \"test.string\"\n'test string'.ToDotCase();\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/string/index.ts",
									"line": 221,
									"character": 17
								}
							]
						},
						{
							"id": 473,
							"name": "ToDouble",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 474,
									"name": "ToDouble",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "convert a string into a Double number Value",
										"returns": "a number instance that represents a double\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns 1.0\n'1'.ToDouble();\n'1.0'.ToDouble();\n// returns 1.5\n'1.5'.ToDouble();\n// returns 0.0\n'aaa'.ToDouble();\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/string/index.ts",
									"line": 152,
									"character": 16
								}
							]
						},
						{
							"id": 471,
							"name": "ToInteger",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 472,
									"name": "ToInteger",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "convert a string into a Integer number Value",
										"returns": "a number instance that represents a integer\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns 1\n'1'.ToInteger();\n'1.5'.ToInteger();\n// returns 0\n'aaa'.ToInteger();\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/string/index.ts",
									"line": 134,
									"character": 17
								}
							]
						},
						{
							"id": 477,
							"name": "ToKebabCase",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 478,
									"name": "ToKebabCase",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Converts a string into the Kebab Case format.",
										"returns": "the Kebab Case String\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns \"foo-bar\"\n'Foo Bar'.ToKebabCase();\n'fooBar'.ToKebabCase();\n'__FOO_BAR__'.ToKebabCase();\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/string/index.ts",
									"line": 182,
									"character": 19
								}
							]
						},
						{
							"id": 544,
							"name": "ToLower",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 545,
									"name": "ToLower",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "convert all letters of the string into lower case.",
										"returns": "the lower case string",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns \"ababab\"\n'aBaBaB'.ToLower();\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/string/index.ts",
									"line": 532,
									"character": 15
								}
							]
						},
						{
							"id": 495,
							"name": "ToLowerCase",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 496,
									"name": "ToLowerCase",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "converts every letter of the string into lower case",
										"returns": "the lower case string\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns \"hello\"\n'HELLO'.ToLowerCase();\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/string/index.ts",
									"line": 301,
									"character": 19
								}
							]
						},
						{
							"id": 485,
							"name": "ToNoCase",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 486,
									"name": "ToNoCase",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Transform into a lower cased string with spaces between words.",
										"returns": "the No Case String\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns \"test.string\"\n'test string'.ToNoCase();\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/string/index.ts",
									"line": 234,
									"character": 16
								}
							]
						},
						{
							"id": 491,
							"name": "ToPascalCase",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 492,
									"name": "ToPascalCase",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Transform into a string of capitalized words without separators.",
										"returns": "the Pascal Case String\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns \"Test string\"\n'TestString'.ToPascalCase();\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/string/index.ts",
									"line": 273,
									"character": 20
								}
							]
						},
						{
							"id": 487,
							"name": "ToPathCase",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 488,
									"name": "ToPathCase",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Transform into a lower case string with slashes between words.",
										"returns": "the Path Case String\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns \"test/string\"\n'test string'.ToPathCase();\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/string/index.ts",
									"line": 247,
									"character": 18
								}
							]
						},
						{
							"id": 489,
							"name": "ToSentenceCase",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 490,
									"name": "ToSentenceCase",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Transform into a lower case with spaces between words, then capitalize the string.",
										"returns": "the Sentence Case String\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns \"Test string\"\n'test string'.ToSentenceCase();\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/string/index.ts",
									"line": 260,
									"character": 22
								}
							]
						},
						{
							"id": 493,
							"name": "ToSnakeCase",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 494,
									"name": "ToSnakeCase",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "Converts a string into the Snake Case format.",
										"returns": "the Snake Case String\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns \"foo_bar\"\n'Foo Bar'.ToSnakeCase();\n'fooBar'.ToSnakeCase();\n'--FOO-BAR--'.ToSnakeCase();\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/string/index.ts",
									"line": 288,
									"character": 19
								}
							]
						},
						{
							"id": 546,
							"name": "ToUpper",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 547,
									"name": "ToUpper",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "convert all letters of the string into upper case.",
										"returns": "the upper case string",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns \"ABABAB\"\n'aBaBaB'.ToLower();\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/string/index.ts",
									"line": 544,
									"character": 15
								}
							]
						},
						{
							"id": 497,
							"name": "ToUpperCase",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 498,
									"name": "ToUpperCase",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "converts every letter of the string into upper case",
										"returns": "the upper case string\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```\n// returns \"HELLO\"\n'hello'.ToLowerCase();\n```\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/string/index.ts",
									"line": 316,
									"character": 19
								}
							]
						},
						{
							"id": 548,
							"name": "Trim",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 549,
									"name": "Trim",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "removes all consecutive string sequences at the beginning and end of the string.",
										"returns": "the trimmed string\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns \"Test\"\n'___Test___'.Trim('_');\n'   Test   '.Trim();\n"
											}
										]
									},
									"parameters": [
										{
											"id": 550,
											"name": "sequence",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"text": "the template string to be removed"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/string/index.ts",
									"line": 559,
									"character": 12
								}
							]
						},
						{
							"id": 554,
							"name": "TrimEnd",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 555,
									"name": "TrimEnd",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "removes all consecutive string sequences at the end of the string.",
										"returns": "the trimmed string\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns \"Test\"\n'Test___'.Trim('_');\n'Test   '.Trim();\n"
											}
										]
									},
									"parameters": [
										{
											"id": 556,
											"name": "sequence",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"text": "the template string to be removed"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/string/index.ts",
									"line": 589,
									"character": 15
								}
							]
						},
						{
							"id": 551,
							"name": "TrimStart",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 552,
									"name": "TrimStart",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "removes all consecutive string sequences at the beginning of the string.",
										"returns": "the trimmed string\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns \"Test\"\n'___Test'.Trim('_');\n'   Test'.Trim();\n"
											}
										]
									},
									"parameters": [
										{
											"id": 553,
											"name": "sequence",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"text": "the template string to be removed"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/string/index.ts",
									"line": 574,
									"character": 17
								}
							]
						},
						{
							"id": 557,
							"name": "Truncate",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 558,
									"name": "Truncate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "cuts a string to a certain length.",
										"returns": "the truncated string\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns \"##...\"\n'##-##Chars##-##'.Truncate(5);\n// returns \"##-#X\"\n'##-##Chars##-##'.Truncate(5, 'X');\n"
											}
										]
									},
									"parameters": [
										{
											"id": 559,
											"name": "length",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true
											},
											"comment": {
												"text": "the length of the result string"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 560,
											"name": "omission",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"text": "the string placed at the end"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 561,
											"name": "separator",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/string/index.ts",
									"line": 607,
									"character": 16
								}
							]
						},
						{
							"id": 501,
							"name": "UpperFirst",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 502,
									"name": "UpperFirst",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "convert the first letter of the string into upper case",
										"returns": "the new string with the upper case first letter\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns \"Hello\"\n'hello'.UpperFirst();\n'Hello'.UpperFirst();\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/string/index.ts",
									"line": 344,
									"character": 18
								}
							]
						},
						{
							"id": 503,
							"name": "Words",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 504,
									"name": "Words",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "splits a string into an array of its words.",
										"returns": "a Array of Words\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n// returns ['hello', 'is', 'a', 'word', 'of', 'a', 'sentence']\n'hello is a word of a sentence'.Words();\n// returns ['a']\n'abcd'.Words(null, 'a');\n// returns ['hello', 'word', 'sentence']\n'hello is a word of a sentence'\n    .Words(e => [\n        'hello', 'word', 'sentence'\n    ].Contains(e)\n);\n"
											}
										]
									},
									"parameters": [
										{
											"id": 505,
											"name": "filter",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"text": "a word filter that can be applied"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 506,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExported": true
													},
													"signatures": [
														{
															"id": 507,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExported": true
															},
															"parameters": [
																{
																	"id": 508,
																	"name": "word",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExported": true
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															}
														}
													],
													"sources": [
														{
															"fileName": "src/types/string/index.ts",
															"line": 367,
															"character": 23
														}
													]
												}
											}
										},
										{
											"id": 509,
											"name": "pattern",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExported": true,
												"isOptional": true
											},
											"comment": {
												"text": "a custom split pattern"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"sources": [
								{
									"fileName": "src/types/string/index.ts",
									"line": 367,
									"character": 13
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								600,
								455,
								452,
								510,
								564,
								567,
								562,
								461,
								571,
								465,
								467,
								586,
								574,
								598,
								596,
								514,
								589,
								499,
								518,
								522,
								526,
								469,
								578,
								530,
								533,
								537,
								541,
								457,
								582,
								592,
								475,
								479,
								481,
								483,
								473,
								471,
								477,
								544,
								495,
								485,
								491,
								487,
								489,
								493,
								546,
								497,
								548,
								554,
								551,
								557,
								501,
								503
							],
							"categories": [
								{
									"title": "string",
									"children": [
										600,
										455,
										452,
										510,
										564,
										567,
										562,
										461,
										571,
										465,
										467,
										586,
										574,
										598,
										596,
										514,
										589,
										499,
										518,
										522,
										526,
										469,
										578,
										530,
										533,
										537,
										541,
										457,
										582,
										592,
										475,
										479,
										481,
										483,
										473,
										471,
										477,
										544,
										495,
										485,
										491,
										487,
										489,
										493,
										546,
										497,
										548,
										554,
										551,
										557,
										501,
										503
									]
								}
							]
						}
					],
					"sources": [
						{
							"fileName": "src/types/string/index.ts",
							"line": 9,
							"character": 20
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						318,
						233,
						451
					]
				}
			],
			"sources": [
				{
					"fileName": "src/types/number/index.ts",
					"line": 6,
					"character": 14
				},
				{
					"fileName": "src/types/array/index.ts",
					"line": 24,
					"character": 14
				},
				{
					"fileName": "src/types/string/index.ts",
					"line": 5,
					"character": 14
				}
			]
		},
		{
			"id": 289,
			"name": "ListSortOrder",
			"kind": 4,
			"kindString": "Enumeration",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "represent a Sort Order of a List"
			},
			"children": [
				{
					"id": 290,
					"name": "ASC",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/types/array/array.extension.ts",
							"line": 24,
							"character": 7
						}
					]
				},
				{
					"id": 291,
					"name": "DESC",
					"kind": 16,
					"kindString": "Enumeration member",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/types/array/array.extension.ts",
							"line": 25,
							"character": 8
						}
					]
				}
			],
			"groups": [
				{
					"title": "Enumeration members",
					"kind": 16,
					"children": [
						290,
						291
					]
				}
			],
			"sources": [
				{
					"fileName": "src/types/array/array.extension.ts",
					"line": 23,
					"character": 25
				}
			]
		},
		{
			"id": 602,
			"name": "BackgroundWorker",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "the Implementation of BackgroundWorker for the Backend (Node Js)\nthe Implementation of BackgroundWorker for the Web",
				"tags": [
					{
						"tag": "category",
						"text": "Pattern\n"
					}
				]
			},
			"typeParameter": [
				{
					"id": 603,
					"name": "T",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {
						"isExported": true
					}
				},
				{
					"id": 604,
					"name": "K",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {
						"isExported": true
					}
				},
				{
					"id": 618,
					"name": "T",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {
						"isExported": true
					}
				},
				{
					"id": 619,
					"name": "K",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {
						"isExported": true
					}
				}
			],
			"children": [
				{
					"id": 612,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "create a new Background Worker\ncreate a new Background Worker\nthe Constructor also load the File from the Backend\nso the execution is faster when not have to load the File again for each execution\ncreate a new Background Worker\nthe Constructor also load the File from the Backend\nso the execution is faster when not have to load the File again for each execution"
					},
					"signatures": [
						{
							"id": 613,
							"name": "new BackgroundWorker",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "create a new Background Worker"
							},
							"parameters": [
								{
									"id": 614,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "the Script File of the Worker\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 602,
								"name": "BackgroundWorker"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/pattern/background.worker/node.ts",
							"line": 40,
							"character": 5
						},
						{
							"fileName": "src/pattern/background.worker/web.ts",
							"line": 30,
							"character": 5
						}
					]
				},
				{
					"id": 607,
					"name": "OnError",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "fired when the Worker Task has a Error\nfired when the Worker Task has a Error"
					},
					"sources": [
						{
							"fileName": "src/pattern/background.worker/node.ts",
							"line": 25,
							"character": 11
						},
						{
							"fileName": "src/pattern/background.worker/web.ts",
							"line": 23,
							"character": 11
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "Error"
							}
						],
						"name": "Subject"
					},
					"defaultValue": "new Subject<Error>()",
					"implementationOf": {
						"type": "reference",
						"id": 203,
						"name": "IBackgroundWorker.OnError"
					}
				},
				{
					"id": 606,
					"name": "OnFinish",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "fired when the Worker Task was finish\nfired when the Worker Task was finish"
					},
					"sources": [
						{
							"fileName": "src/pattern/background.worker/node.ts",
							"line": 21,
							"character": 12
						},
						{
							"fileName": "src/pattern/background.worker/web.ts",
							"line": 19,
							"character": 12
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "unknown",
								"name": "K"
							}
						],
						"name": "Subject"
					},
					"defaultValue": "new Subject<K>()",
					"implementationOf": {
						"type": "reference",
						"id": 202,
						"name": "IBackgroundWorker.OnFinish"
					}
				},
				{
					"id": 605,
					"name": "WorkPath",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "the Path of the Worker File\nthe Path of the Worker File"
					},
					"sources": [
						{
							"fileName": "src/pattern/background.worker/node.ts",
							"line": 16,
							"character": 12
						},
						{
							"fileName": "src/pattern/background.worker/web.ts",
							"line": 14,
							"character": 12
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"implementationOf": {
						"type": "reference",
						"id": 201,
						"name": "IBackgroundWorker.WorkPath"
					}
				},
				{
					"id": 610,
					"name": "IsJavaScript",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "detect if the Worker File to execute is a Javascript File\ndetect if the Worker File to execute is a Javascript File"
					},
					"getSignature": [
						{
							"id": 620,
							"name": "__get",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "detect if the Worker File to execute is a Javascript File"
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/pattern/background.worker/node.ts",
							"line": 38,
							"character": 20
						},
						{
							"fileName": "src/pattern/background.worker/web.ts",
							"line": 28,
							"character": 20
						}
					]
				},
				{
					"id": 608,
					"name": "IsTypeScript",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "detect if the Worker File to execute is a Typescript File\nTypescript files takes longer to execute while the compiler must compile it"
					},
					"getSignature": [
						{
							"id": 609,
							"name": "__get",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "detect if the Worker File to execute is a Typescript File\nTypescript files takes longer to execute while the compiler must compile it"
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/pattern/background.worker/node.ts",
							"line": 31,
							"character": 20
						}
					]
				},
				{
					"id": 615,
					"name": "Run",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "start a Execution of the Worker"
					},
					"signatures": [
						{
							"id": 616,
							"name": "Run",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "start a Execution of the Worker"
							},
							"parameters": [
								{
									"id": 617,
									"name": "args",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "arguments passed into the Worker\n"
									},
									"type": {
										"type": "typeParameter",
										"name": "T"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"implementationOf": {
								"type": "reference",
								"id": 205,
								"name": "IBackgroundWorker.Run"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/pattern/background.worker/node.ts",
							"line": 54,
							"character": 7
						},
						{
							"fileName": "src/pattern/background.worker/web.ts",
							"line": 56,
							"character": 7
						}
					],
					"implementationOf": {
						"type": "reference",
						"id": 204,
						"name": "IBackgroundWorker.Run"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						612
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						607,
						606,
						605
					]
				},
				{
					"title": "Accessors",
					"kind": 262144,
					"children": [
						610,
						608
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						615
					]
				}
			],
			"sources": [
				{
					"fileName": "src/pattern/background.worker/node.ts",
					"line": 12,
					"character": 29
				},
				{
					"fileName": "src/pattern/background.worker/web.ts",
					"line": 9,
					"character": 29
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"id": 198,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "T"
						},
						{
							"type": "typeParameter",
							"name": "K"
						}
					],
					"name": "IBackgroundWorker"
				},
				{
					"type": "reference",
					"id": 198,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "T"
						},
						{
							"type": "typeParameter",
							"name": "K"
						}
					],
					"name": "IBackgroundWorker"
				}
			]
		},
		{
			"id": 1216,
			"name": "Byte",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "a Number represent as Byte"
			},
			"children": [
				{
					"id": 1217,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "create a new Byte\nNumbers that are higher or lower than the maximum or minimum byte values are truncated."
					},
					"signatures": [
						{
							"id": 1218,
							"name": "new Byte",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "create a new Byte\nNumbers that are higher or lower than the maximum or minimum byte values are truncated."
							},
							"parameters": [
								{
									"id": 1219,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "the byte Value\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1216,
								"name": "Byte"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/byte/byte.ts",
							"line": 7,
							"character": 23
						}
					]
				},
				{
					"id": 1220,
					"name": "Value",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "get the Byte Value"
					},
					"getSignature": [
						{
							"id": 1221,
							"name": "__get",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "get the Byte Value"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/byte/byte.ts",
							"line": 21,
							"character": 13
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						1217
					]
				},
				{
					"title": "Accessors",
					"kind": 262144,
					"children": [
						1220
					]
				}
			],
			"sources": [
				{
					"fileName": "src/types/byte/byte.ts",
					"line": 6,
					"character": 17
				}
			]
		},
		{
			"id": 1222,
			"name": "ByteStream",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "a Stream of multiple Bytes that can hold any Byte Values",
				"text": "and handle Read/Write Operations\n"
			},
			"children": [
				{
					"id": 1229,
					"name": "Length",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "the size of the Stream"
					},
					"getSignature": [
						{
							"id": 1230,
							"name": "__get",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "the size of the Stream"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/byte/byte.stream.ts",
							"line": 39,
							"character": 14
						}
					]
				},
				{
					"id": 1231,
					"name": "Position",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "the current Position of the Read/Write Cursor in the Stream"
					},
					"getSignature": [
						{
							"id": 1232,
							"name": "__get",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "the current Position of the Read/Write Cursor in the Stream"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/byte/byte.stream.ts",
							"line": 46,
							"character": 16
						}
					]
				},
				{
					"id": 1244,
					"name": "Read",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1245,
							"name": "Read",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "read a Part of the Byte Stream on default the complete Stream was returned"
							},
							"parameters": [
								{
									"id": 1246,
									"name": "pos",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"text": "the start position to read"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1247,
									"name": "len",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"text": "the number of Bytes to read\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "number"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/byte/byte.stream.ts",
							"line": 98,
							"character": 8
						}
					]
				},
				{
					"id": 1248,
					"name": "ReadByte",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1249,
							"name": "ReadByte",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "read a single Byte at a specific Position of the Stream\nif no Position passed the first Byte was read"
							},
							"parameters": [
								{
									"id": 1250,
									"name": "pos",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"text": "the Position in the Stream of the Byte to read\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/byte/byte.stream.ts",
							"line": 120,
							"character": 12
						}
					]
				},
				{
					"id": 1233,
					"name": "ResetCursor",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1234,
							"name": "ResetCursor",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "reset the Read/Write Cursor of the Stream"
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/byte/byte.stream.ts",
							"line": 53,
							"character": 15
						}
					]
				},
				{
					"id": 1235,
					"name": "SetCursor",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1236,
							"name": "SetCursor",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "set the Read/Write Cursor to a specific Position\nif a bigger Position given the Cursor was set to the end of  the Stream"
							},
							"parameters": [
								{
									"id": 1237,
									"name": "pos",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "the Position the Cursor was set\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/byte/byte.stream.ts",
							"line": 62,
							"character": 13
						}
					]
				},
				{
					"id": 1251,
					"name": "ToString",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1252,
							"name": "ToString",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "get the String representation of the Byte Stream"
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/byte/byte.stream.ts",
							"line": 128,
							"character": 12
						}
					]
				},
				{
					"id": 1238,
					"name": "Write",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1239,
							"name": "Write",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "write multiple Bytes into the Byte Stream"
							},
							"parameters": [
								{
									"id": 1240,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "the Bytes to write into Stream\n"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 1216,
											"name": "Byte"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/byte/byte.stream.ts",
							"line": 78,
							"character": 9
						}
					]
				},
				{
					"id": 1241,
					"name": "WriteByte",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1242,
							"name": "WriteByte",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "write a single Byte into the Stream"
							},
							"parameters": [
								{
									"id": 1243,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "the Byte to write into Stream\n"
									},
									"type": {
										"type": "reference",
										"id": 1216,
										"name": "Byte"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/byte/byte.stream.ts",
							"line": 89,
							"character": 13
						}
					]
				},
				{
					"id": 1223,
					"name": "FromByteString",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExported": true
					},
					"signatures": [
						{
							"id": 1224,
							"name": "FromByteString",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "create a new Byte Stream from a Byte String"
							},
							"parameters": [
								{
									"id": 1225,
									"name": "str",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "the Byte String\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1222,
								"name": "ByteStream"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/byte/byte.stream.ts",
							"line": 18,
							"character": 25
						}
					]
				},
				{
					"id": 1226,
					"name": "FromNumberArray",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExported": true
					},
					"signatures": [
						{
							"id": 1227,
							"name": "FromNumberArray",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "create a new ByteStream from a Array of Numbers"
							},
							"parameters": [
								{
									"id": 1228,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "the Array of Numbers\n"
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "number"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1222,
								"name": "ByteStream"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/byte/byte.stream.ts",
							"line": 30,
							"character": 26
						}
					]
				}
			],
			"groups": [
				{
					"title": "Accessors",
					"kind": 262144,
					"children": [
						1229,
						1231
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1244,
						1248,
						1233,
						1235,
						1251,
						1238,
						1241,
						1223,
						1226
					]
				}
			],
			"sources": [
				{
					"fileName": "src/types/byte/byte.stream.ts",
					"line": 10,
					"character": 23
				}
			]
		},
		{
			"id": 1289,
			"name": "ClassValidator",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "a Validator to validate decorated Typescript Classes"
			},
			"children": [
				{
					"id": 1290,
					"name": "Validate",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExported": true
					},
					"signatures": [
						{
							"id": 1291,
							"name": "Validate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "validate again a Decorated Class Instance",
								"tags": [
									{
										"tag": "example",
										"text": "\nclass User {"
									},
									{
										"tag": "isdefined('name",
										"text": "must be defined')\n    Name: string;\n"
									},
									{
										"tag": "min(0,",
										"text": "'Age must be greater -1')"
									},
									{
										"tag": "max(200,",
										"text": "'Age must me lower 201')\n    Age: number;\n"
									},
									{
										"tag": "isemail('email",
										"text": "must be a valid email address')\n    Email: string;\n}\nconst instance = new User();\n// returns [\n     {Message:'Name must be defined'},\n     {Message:'Age must be greater -1'},\n     {Message:'Age must me lower 201'},\n     {Message:'Email must be a valid email address'},\n]\nClassValidator.Validate(instance);\ninstance.Name = 'Udo';\ninstance.Age = 20;\ninstance.Email = 'udo@address.de';\n// returns []\nClassValidator.Validate(instance);\n"
									}
								]
							},
							"typeParameter": [
								{
									"id": 1292,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								}
							],
							"parameters": [
								{
									"id": 1293,
									"name": "instance",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "the Instance of the Class to Validate\n"
									},
									"type": {
										"type": "typeParameter",
										"name": "T"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 1287,
											"name": "IValidationError"
										}
									}
								],
								"name": "Promise"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/utils/class.validator.ts",
							"line": 186,
							"character": 25
						}
					]
				},
				{
					"id": 1294,
					"name": "ValidateObject",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExported": true
					},
					"signatures": [
						{
							"id": 1295,
							"name": "ValidateObject",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "validate a plain Object again a Class",
								"tags": [
									{
										"tag": "example",
										"text": "\nclass User {"
									},
									{
										"tag": "isdefined('name",
										"text": "must be defined')\n    Name: string;\n"
									},
									{
										"tag": "min(0,",
										"text": "'Age must be greater -1')"
									},
									{
										"tag": "max(200,",
										"text": "'Age must me lower 201')\n    Age: number;\n"
									},
									{
										"tag": "isemail('email",
										"text": "must be a valid email address')\n    Email: string;\n}\nconst demoUser = {};\n// returns [\n     {Message:'Name must be defined'},\n     {Message:'Age must be greater -1'},\n     {Message:'Age must me lower 201'},\n     {Message:'Email must be a valid email address'},\n]\nClassValidator.Validate(demoUser);\ndemoUser.Name = 'Udo';\ndemoUser.Age = 20;\ndemoUser.Email = 'udo@address.de';\n// returns []\nClassValidator.Validate(demoUser);\n"
									}
								]
							},
							"typeParameter": [
								{
									"id": 1296,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								}
							],
							"parameters": [
								{
									"id": 1297,
									"name": "constructor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "the Class with the Validation Decorators"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 1298,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "src/utils/class.validator.ts",
													"line": 392,
													"character": 47
												}
											]
										}
									}
								},
								{
									"id": 1299,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "the raw JSON Object\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 1287,
											"name": "IValidationError"
										}
									}
								],
								"name": "Promise"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/utils/class.validator.ts",
							"line": 392,
							"character": 31
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1290,
						1294
					]
				}
			],
			"sources": [
				{
					"fileName": "src/utils/class.validator.ts",
					"line": 154,
					"character": 27
				}
			]
		},
		{
			"id": 1074,
			"name": "DateTime",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "represent a DateTime DataType"
			},
			"children": [
				{
					"id": 1113,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "create a new DateTime",
						"tags": [
							{
								"tag": "example",
								"text": "\n// create a date in Europe Time Zone 2019-01-01 01:00:00.000\nnew DateTime('Europe/Berlin', 2019, 1, 1, 1, 0, 0, 0);\nnew DateTime('Europe/Berlin', 2019, 1, 1);\n// create a date in Europe Time Zone 2019-01-01 00:00:00.000\nnew DateTime('Europe/Berlin', 2019, 1, 1, null, null, null, null, true);\n"
							}
						]
					},
					"signatures": [
						{
							"id": 1114,
							"name": "new DateTime",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "create a new DateTime",
								"tags": [
									{
										"tag": "example",
										"text": "\n// create a date in Europe Time Zone 2019-01-01 01:00:00.000\nnew DateTime('Europe/Berlin', 2019, 1, 1, 1, 0, 0, 0);\nnew DateTime('Europe/Berlin', 2019, 1, 1);\n// create a date in Europe Time Zone 2019-01-01 00:00:00.000\nnew DateTime('Europe/Berlin', 2019, 1, 1, null, null, null, null, true);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1115,
									"name": "zone",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "the dates time zone"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1116,
									"name": "year",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "the year of the date"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1117,
									"name": "month",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "the month of the date"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1118,
									"name": "day",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "the day of the date"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1119,
									"name": "hour",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "the hours of the date"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1120,
									"name": "minute",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "the minutes of the date"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1121,
									"name": "second",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "the seconds of the date"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1122,
									"name": "millisecond",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "the milliseconds of the date"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1123,
									"name": "keepTimeZone",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "not convert the given date to the given time zone\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								}
							],
							"type": {
								"type": "reference",
								"id": 1074,
								"name": "DateTime"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/date.time.ts",
							"line": 180,
							"character": 5
						}
					]
				},
				{
					"id": 1107,
					"name": "Date",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "the Date without the Time"
					},
					"getSignature": [
						{
							"id": 1108,
							"name": "__get",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "the Date without the Time"
							},
							"type": {
								"type": "reference",
								"id": 1074,
								"name": "DateTime"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/date.time.ts",
							"line": 164,
							"character": 12
						}
					]
				},
				{
					"id": 1079,
					"name": "Day",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Day of the Date in Month"
					},
					"getSignature": [
						{
							"id": 1080,
							"name": "__get",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Day of the Date in Month"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/date.time.ts",
							"line": 55,
							"character": 11
						}
					]
				},
				{
					"id": 1095,
					"name": "DayOfWeek",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "the Weekday of the DateTime"
					},
					"getSignature": [
						{
							"id": 1096,
							"name": "__get",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "the Weekday of the DateTime"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/date.time.ts",
							"line": 121,
							"character": 17
						}
					]
				},
				{
					"id": 1097,
					"name": "DayOfYear",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "the Day in the Year of the DateTime"
					},
					"getSignature": [
						{
							"id": 1098,
							"name": "__get",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "the Day in the Year of the DateTime"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/date.time.ts",
							"line": 128,
							"character": 17
						}
					]
				},
				{
					"id": 1101,
					"name": "DaysInMonth",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "the Number of Days in the Month of the DateTime"
					},
					"getSignature": [
						{
							"id": 1102,
							"name": "__get",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "the Number of Days in the Month of the DateTime"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/date.time.ts",
							"line": 142,
							"character": 19
						}
					]
				},
				{
					"id": 1099,
					"name": "DaysInYear",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "the Number of the Days in the DateTime Year"
					},
					"getSignature": [
						{
							"id": 1100,
							"name": "__get",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "the Number of the Days in the DateTime Year"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/date.time.ts",
							"line": 135,
							"character": 18
						}
					]
				},
				{
					"id": 1081,
					"name": "Hour",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Hour of the Day"
					},
					"getSignature": [
						{
							"id": 1082,
							"name": "__get",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Hour of the Day"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/date.time.ts",
							"line": 62,
							"character": 12
						}
					]
				},
				{
					"id": 1087,
					"name": "Millisecond",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Millisecond of the Day"
					},
					"getSignature": [
						{
							"id": 1088,
							"name": "__get",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Millisecond of the Day"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/date.time.ts",
							"line": 83,
							"character": 19
						}
					]
				},
				{
					"id": 1083,
					"name": "Minute",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Minute of the Day"
					},
					"getSignature": [
						{
							"id": 1084,
							"name": "__get",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Minute of the Day"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/date.time.ts",
							"line": 69,
							"character": 14
						}
					]
				},
				{
					"id": 1077,
					"name": "Month",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Month of the Date"
					},
					"getSignature": [
						{
							"id": 1078,
							"name": "__get",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Month of the Date"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/date.time.ts",
							"line": 48,
							"character": 13
						}
					]
				},
				{
					"id": 1085,
					"name": "Second",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Second of the Day"
					},
					"getSignature": [
						{
							"id": 1086,
							"name": "__get",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Second of the Day"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/date.time.ts",
							"line": 76,
							"character": 14
						}
					]
				},
				{
					"id": 1109,
					"name": "TimeOfDay",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "the Time of the Day"
					},
					"getSignature": [
						{
							"id": 1110,
							"name": "__get",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "the Time of the Day"
							},
							"type": {
								"type": "reference",
								"id": 994,
								"name": "TimeSpan"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/date.time.ts",
							"line": 171,
							"character": 17
						}
					]
				},
				{
					"id": 1089,
					"name": "UTC",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "get the DateTime as UTC"
					},
					"getSignature": [
						{
							"id": 1090,
							"name": "__get",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "get the DateTime as UTC"
							},
							"type": {
								"type": "reference",
								"id": 1074,
								"name": "DateTime"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/date.time.ts",
							"line": 90,
							"character": 11
						}
					]
				},
				{
					"id": 1091,
					"name": "UTCOffsetMinutes",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "the offset to UTC Timezone in Minutes"
					},
					"getSignature": [
						{
							"id": 1092,
							"name": "__get",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "the offset to UTC Timezone in Minutes"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/date.time.ts",
							"line": 107,
							"character": 24
						}
					]
				},
				{
					"id": 1111,
					"name": "Valid",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "check if the DateTime is a valid DateTime"
					},
					"getSignature": [
						{
							"id": 1112,
							"name": "__get",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "check if the DateTime is a valid DateTime"
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/date.time.ts",
							"line": 178,
							"character": 13
						}
					]
				},
				{
					"id": 1075,
					"name": "Year",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Year of the Date"
					},
					"getSignature": [
						{
							"id": 1076,
							"name": "__get",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Year of the Date"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/date.time.ts",
							"line": 41,
							"character": 12
						}
					]
				},
				{
					"id": 1103,
					"name": "YearQuarter",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "the Quarter of the Year of the DateTime"
					},
					"getSignature": [
						{
							"id": 1104,
							"name": "__get",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "the Quarter of the Year of the DateTime"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/date.time.ts",
							"line": 150,
							"character": 19
						}
					]
				},
				{
					"id": 1105,
					"name": "YearWeekNumber",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "the Week Number of the Year of DateTime"
					},
					"getSignature": [
						{
							"id": 1106,
							"name": "__get",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "the Week Number of the Year of DateTime"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/date.time.ts",
							"line": 157,
							"character": 22
						}
					]
				},
				{
					"id": 1093,
					"name": "Zone",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "the current Timezone Name"
					},
					"getSignature": [
						{
							"id": 1094,
							"name": "__get",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "the current Timezone Name"
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/date.time.ts",
							"line": 114,
							"character": 12
						}
					]
				},
				{
					"id": 1143,
					"name": "Add",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1144,
							"name": "Add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "add a DateTime to this DateTime",
								"tags": [
									{
										"tag": "example",
										"text": "\n// returns 4038-02-03 23:00:00.000\nDateTime.FromISOString('2019-01-01T00:00:00').Add(DateTime.FromISOString('2019-01-02T23:00:00'));\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1145,
									"name": "dt",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "the DateTime to add on this DateTime\n"
									},
									"type": {
										"type": "reference",
										"id": 1074,
										"name": "DateTime"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1074,
								"name": "DateTime"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/date.time.ts",
							"line": 356,
							"character": 7
						}
					]
				},
				{
					"id": 1158,
					"name": "AddDays",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1159,
							"name": "AddDays",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "add a number of Days to this DateTime",
								"tags": [
									{
										"tag": "example",
										"text": "\n// returns 2019-01-03 00:00:00.000\nDateTime.FromISOString('2019-01-01T00:00:00').AddDays(2);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1160,
									"name": "days",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "the number of days to add\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1074,
								"name": "DateTime"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/date.time.ts",
							"line": 443,
							"character": 11
						}
					]
				},
				{
					"id": 1161,
					"name": "AddHours",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1162,
							"name": "AddHours",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "add a number of Hours to this DateTime",
								"tags": [
									{
										"tag": "example",
										"text": "\n// returns 2019-01-01 01:00:00.000\nDateTime.FromISOString('2019-01-01T00:00:00').AddHours(1);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1163,
									"name": "hours",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "the number of hours to add\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1074,
								"name": "DateTime"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/date.time.ts",
							"line": 457,
							"character": 12
						}
					]
				},
				{
					"id": 1170,
					"name": "AddMilliseconds",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1171,
							"name": "AddMilliseconds",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "add a number of Milliseconds to this DateTime",
								"tags": [
									{
										"tag": "example",
										"text": "\n// returns 2019-01-01 00:00:00.001\nDateTime.FromISOString('2019-01-01T00:00:00').AddMilliseconds(1);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1172,
									"name": "milliseconds",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "the number of milliseconds to add\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1074,
								"name": "DateTime"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/date.time.ts",
							"line": 499,
							"character": 19
						}
					]
				},
				{
					"id": 1164,
					"name": "AddMinutes",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1165,
							"name": "AddMinutes",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "add a number of Minutes to this DateTime",
								"tags": [
									{
										"tag": "example",
										"text": "\n// returns 2019-01-01 00:01:00.000\nDateTime.FromISOString('2019-01-01T00:00:00').AddMinutes(1);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1166,
									"name": "minutes",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "the number of minutes to add\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1074,
								"name": "DateTime"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/date.time.ts",
							"line": 471,
							"character": 14
						}
					]
				},
				{
					"id": 1155,
					"name": "AddMonths",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1156,
							"name": "AddMonths",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "add a number of Months to this DateTime",
								"tags": [
									{
										"tag": "example",
										"text": "\n// returns 2019-03-01 00:00:00.000\nDateTime.FromISOString('2019-01-01T00:00:00').AddMonths(2);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1157,
									"name": "months",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "the number of months to add\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1074,
								"name": "DateTime"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/date.time.ts",
							"line": 429,
							"character": 13
						}
					]
				},
				{
					"id": 1167,
					"name": "AddSeconds",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1168,
							"name": "AddSeconds",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "add a number of Seconds to this DateTime",
								"tags": [
									{
										"tag": "example",
										"text": "\n// returns 2019-01-01 00:00:01.000\nDateTime.FromISOString('2019-01-01T00:00:00').AddSeconds(1);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1169,
									"name": "seconds",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "the number of seconds to add\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1074,
								"name": "DateTime"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/date.time.ts",
							"line": 485,
							"character": 14
						}
					]
				},
				{
					"id": 1152,
					"name": "AddYears",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1153,
							"name": "AddYears",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "add a number of Years to this DateTime",
								"tags": [
									{
										"tag": "example",
										"text": "\n// returns 2021-01-01 00:00:00.000\nDateTime.FromISOString('2019-01-01T00:00:00').AddYears(2);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1154,
									"name": "years",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "the number of years to add\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1074,
								"name": "DateTime"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/date.time.ts",
							"line": 415,
							"character": 12
						}
					]
				},
				{
					"id": 1146,
					"name": "Equals",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1147,
							"name": "Equals",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "check if the DateTime equals this DateTime",
								"tags": [
									{
										"tag": "example",
										"text": "\n// returns true\nDateTime.FromISOString('2019-02-02T02:00:00').Equals(DateTime.FromISOString('2019-02-02T02:00:00'));\n// returns false\nDateTime.FromISOString('2019-02-02T02:00:00').Equals(DateTime.FromISOString('2019-02-02T03:00:00'));\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1148,
									"name": "dt",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "the DateTime to compare with this DateTime\n"
									},
									"type": {
										"type": "reference",
										"id": 1074,
										"name": "DateTime"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/date.time.ts",
							"line": 380,
							"character": 10
						}
					]
				},
				{
					"id": 1176,
					"name": "IsAfter",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1177,
							"name": "IsAfter",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "is this DateTime after",
								"tags": [
									{
										"tag": "example",
										"text": "\n// returns true\nDateTime.FromISOString('2019-02-02T02:00:00').IsAfter(DateTime.FromISOString('2019-02-01T02:00:00'));\n// returns false\nDateTime.FromISOString('2019-02-02T02:00:00').IsAfter(DateTime.FromISOString('2019-02-03T02:00:00'));\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1178,
									"name": "dt",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "the DateTime to compare with this DateTime\n"
									},
									"type": {
										"type": "reference",
										"id": 1074,
										"name": "DateTime"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/date.time.ts",
							"line": 530,
							"character": 11
						}
					]
				},
				{
					"id": 1173,
					"name": "IsBefore",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1174,
							"name": "IsBefore",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "is this DateTime before",
								"tags": [
									{
										"tag": "example",
										"text": "\n// returns true\nDateTime.FromISOString('2019-02-02T02:00:00').IsBefore(DateTime.FromISOString('2019-02-03T02:00:00'));\n// returns false\nDateTime.FromISOString('2019-02-02T02:00:00').IsBefore(DateTime.FromISOString('2019-02-02T02:00:00'));\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1175,
									"name": "dt",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "the DateTime to compare with this DateTime\n"
									},
									"type": {
										"type": "reference",
										"id": 1074,
										"name": "DateTime"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/date.time.ts",
							"line": 515,
							"character": 12
						}
					]
				},
				{
					"id": 1179,
					"name": "IsDaylightSavingTime",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1180,
							"name": "IsDaylightSavingTime",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "if the Current DateTime in Daylight Saving Time",
								"tags": [
									{
										"tag": "example",
										"text": "\n// returns true\nDateTime.FromISOString('2019-06-02T02:00:00', 'Europe/Berlin').IsDaylightSavingTime();\n// returns false\nDateTime.FromISOString('2019-11-02T02:00:00', 'Europe/Berlin').IsDaylightSavingTime();\nDateTime.FromISOString('2019-06-02T02:00:00', 'UTC').IsDaylightSavingTime();\nDateTime.FromISOString('2019-11-02T02:00:00', 'UTC').IsDaylightSavingTime();\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/date.time.ts",
							"line": 545,
							"character": 24
						}
					]
				},
				{
					"id": 1149,
					"name": "Subtract",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1150,
							"name": "Subtract",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "subtract DateTime from this DateTime",
								"tags": [
									{
										"tag": "example",
										"text": "\n// returns 2019-01-01 01:00:00.000\nDateTime.FromISOString('2019-02-02T02:00:00').Subtract(DateTime.FromISOString('0000-01-01T01:00:00'));\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1151,
									"name": "dt",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "the DateTime to subtract on this DateTime\n"
									},
									"type": {
										"type": "reference",
										"id": 1074,
										"name": "DateTime"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1074,
								"name": "DateTime"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/date.time.ts",
							"line": 393,
							"character": 12
						}
					]
				},
				{
					"id": 1181,
					"name": "ToString",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1182,
							"name": "ToString",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "return the DateTime as a string",
								"text": "you can define a Format string to format the DateTime\n",
								"tags": [
									{
										"tag": "example",
										"text": "\n// returns \"2019-01-01 12:23:54\"\nDateTime.FromISOString('2019-01-01T12:23:54').ToString();\n// returns \"2019\"\nDateTime.FromISOString('2019-01-01T12:23:54').ToString('yyyy');\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1183,
									"name": "fmt",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"text": "the string format\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/date.time.ts",
							"line": 562,
							"character": 12
						}
					]
				},
				{
					"id": 1139,
					"name": "ToZone",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1140,
							"name": "ToZone",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "get the DateTime in a specific Timezone",
								"tags": [
									{
										"tag": "example",
										"text": "\nconst TARGET_ZONE = 'Europe/Berlin';\nconst dateEurope = new DateTime('Europe/Berlin', 2019, 1, 1, 1);\nconst dateUtc = new DateTime('UTC', 2019, 1, 1, 1);\n// returns 2019-01-01 01:00:00.000 in Europe/Berlin Time Zone\ndateEurope.ToZone(TARGET_ZONE);\ndateEurope.ToZone(TARGET_ZONE, true);\ndateUtc.ToZone(TARGET_ZONE, true);\n// returns 2019-01-01 02:00:00.000 in Europe/Berlin Time Zone\ndateUtc.ToZone(TARGET_ZONE);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1141,
									"name": "zone",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "the time zone to convert this time"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1142,
									"name": "keepTimeZone",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "not convert the time only set the new time zone\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								}
							],
							"type": {
								"type": "reference",
								"id": 1074,
								"name": "DateTime"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/date.time.ts",
							"line": 334,
							"character": 10
						}
					]
				},
				{
					"id": 1131,
					"name": "FromISOString",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExported": true
					},
					"signatures": [
						{
							"id": 1132,
							"name": "FromISOString",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "create DateTime from ISO string",
								"text": "you have to specify the Timezone or UTC was taken!\n",
								"tags": [
									{
										"tag": "example",
										"text": "\n// returns DateTime 2019-01-01 01:00:00.000 in UTC Time Zone\nDateTime.FromISOString('2019-01-01T01:00:00.000');\n// returns DateTime 2019-01-01 01:00:00.000 in Europe/Berlin Time Zone\nDateTime.FromISOString('2019-01-01T01:00:00.000', 'Europe/Berlin');\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1133,
									"name": "isoStr",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "the iso date time string"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 1134,
									"name": "zone",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"text": "the time zone to use\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1074,
								"name": "DateTime"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/date.time.ts",
							"line": 282,
							"character": 24
						}
					]
				},
				{
					"id": 1127,
					"name": "FromJavascriptDate",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExported": true
					},
					"signatures": [
						{
							"id": 1128,
							"name": "FromJavascriptDate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "create a DateTime Type from a Javascript Date Object",
								"text": "you have to specify the Timezone or UTC was taken!\n",
								"tags": [
									{
										"tag": "example",
										"text": "\n// returns DateTime 2019-01-01 01:00:00.000 in UTC Time Zone\nDateTime.FromJavascriptDate(new Date(Date.UTC(2019,0,1,1,0,0)));\n// returns DateTime 2019-01-01 01:00:00.000 in Europe/Berlin Time Zone\nDateTime.FromJavascriptDate(new Date(Date.UTC(2019,0,1,1,0,0), 'Europe/Berlin'));\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1129,
									"name": "date",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "the javascript date object"
									},
									"type": {
										"type": "reference",
										"name": "Date"
									}
								},
								{
									"id": 1130,
									"name": "zone",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"text": "the time zone to use\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1074,
								"name": "DateTime"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/date.time.ts",
							"line": 257,
							"character": 29
						}
					]
				},
				{
					"id": 1124,
					"name": "FromLuxon",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExported": true
					},
					"signatures": [
						{
							"id": 1125,
							"name": "FromLuxon",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "create DateTime from a Luxon Date Object",
								"text": "uses the Timezone from the Luxon Object\n",
								"tags": [
									{
										"tag": "example",
										"text": "\n// returns the current time in utc\nconst vgl = LuxonDateTime.utc();\nDateTime.FromLuxon(vgl);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1126,
									"name": "luxonDate",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "the luxon datetime object instance\n"
									},
									"type": {
										"type": "reference",
										"name": "LuxonDateTime"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1074,
								"name": "DateTime"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/date.time.ts",
							"line": 231,
							"character": 20
						}
					]
				},
				{
					"id": 1135,
					"name": "FromMilliseconds",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExported": true
					},
					"signatures": [
						{
							"id": 1136,
							"name": "FromMilliseconds",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "create DateTime from Milliseconds",
								"tags": [
									{
										"tag": "example",
										"text": "\nconst vgl = LuxonDateTime.utc();\n// returns the current date time in UTC Time Zone\nDateTime.FromMilliseconds(vgl.toMillis());\n// returns the current date time in Europe/Berlin Time Zone\nDateTime.FromMilliseconds(vgl.toMillis(), 'Europe/Berlin');\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1137,
									"name": "milliseconds",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "the total milliseconds since 1970-01-01 00:00:00.000"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1138,
									"name": "zone",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"text": "the time zone to use\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1074,
								"name": "DateTime"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/date.time.ts",
							"line": 306,
							"character": 27
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						1113
					]
				},
				{
					"title": "Accessors",
					"kind": 262144,
					"children": [
						1107,
						1079,
						1095,
						1097,
						1101,
						1099,
						1081,
						1087,
						1083,
						1077,
						1085,
						1109,
						1089,
						1091,
						1111,
						1075,
						1103,
						1105,
						1093
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1143,
						1158,
						1161,
						1170,
						1164,
						1155,
						1167,
						1152,
						1146,
						1176,
						1173,
						1179,
						1149,
						1181,
						1139,
						1131,
						1127,
						1124,
						1135
					]
				}
			],
			"sources": [
				{
					"fileName": "src/types/datetime/date.time.ts",
					"line": 35,
					"character": 21
				}
			]
		},
		{
			"id": 644,
			"name": "Dictionary",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "representation of a string Dictionary"
			},
			"typeParameter": [
				{
					"id": 645,
					"name": "T",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {
						"isExported": true
					}
				}
			],
			"children": [
				{
					"id": 646,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "create a new Dictionary you can fill it with predefined Data"
					},
					"signatures": [
						{
							"id": 647,
							"name": "new Dictionary",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "create a new Dictionary you can fill it with predefined Data"
							},
							"parameters": [
								{
									"id": 648,
									"name": "dictionary",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "\n"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 649,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExported": true
											},
											"indexSignature": [
												{
													"id": 650,
													"name": "__index",
													"kind": 8192,
													"kindString": "Index signature",
													"flags": {
														"isExported": true
													},
													"parameters": [
														{
															"id": 651,
															"name": "key",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExported": true
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "typeParameter",
														"name": "T"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/types/dictionary/dictionary.ts",
													"line": 13,
													"character": 28
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 644,
								"name": "Dictionary"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/dictionary/dictionary.ts",
							"line": 7,
							"character": 23
						}
					]
				},
				{
					"id": 652,
					"name": "Count",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Number of Entries in the Dictionary"
					},
					"getSignature": [
						{
							"id": 653,
							"name": "__get",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Number of Entries in the Dictionary"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/dictionary/dictionary.ts",
							"line": 23,
							"character": 13
						}
					]
				},
				{
					"id": 654,
					"name": "Values",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "all Values of the Dictionary"
					},
					"getSignature": [
						{
							"id": 655,
							"name": "__get",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "all Values of the Dictionary"
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "typeParameter",
									"name": "T"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/dictionary/dictionary.ts",
							"line": 31,
							"character": 14
						}
					]
				},
				{
					"id": 658,
					"name": "Add",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 659,
							"name": "Add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "add a Entry into the Dictionary"
							},
							"parameters": [
								{
									"id": 660,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 661,
									"name": "item",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {},
									"type": {
										"type": "typeParameter",
										"name": "T"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 644,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									}
								],
								"name": "Dictionary"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/dictionary/dictionary.ts",
							"line": 49,
							"character": 7
						}
					]
				},
				{
					"id": 662,
					"name": "Clear",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 663,
							"name": "Clear",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "clear the Dictionary"
							},
							"type": {
								"type": "reference",
								"id": 644,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									}
								],
								"name": "Dictionary"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/dictionary/dictionary.ts",
							"line": 58,
							"character": 9
						}
					]
				},
				{
					"id": 667,
					"name": "ContainsKey",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 668,
							"name": "ContainsKey",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "check if a Key is in the Dictionary"
							},
							"parameters": [
								{
									"id": 669,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/dictionary/dictionary.ts",
							"line": 78,
							"character": 15
						}
					]
				},
				{
					"id": 670,
					"name": "ContainsValue",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 671,
							"name": "ContainsValue",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "check if a Value is in the Dictionary"
							},
							"parameters": [
								{
									"id": 672,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {},
									"type": {
										"type": "typeParameter",
										"name": "T"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/dictionary/dictionary.ts",
							"line": 87,
							"character": 17
						}
					]
				},
				{
					"id": 681,
					"name": "Find",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 682,
							"name": "Find",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "get a Value that match the Filter Condition"
							},
							"parameters": [
								{
									"id": 683,
									"name": "filter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 684,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 685,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExported": true
													},
													"parameters": [
														{
															"id": 686,
															"name": "d",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExported": true
															},
															"type": {
																"type": "typeParameter",
																"name": "T"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/types/dictionary/dictionary.ts",
													"line": 113,
													"character": 16
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "typeParameter",
								"name": "T"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/dictionary/dictionary.ts",
							"line": 113,
							"character": 8
						}
					]
				},
				{
					"id": 687,
					"name": "FindAll",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 688,
							"name": "FindAll",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "same as Find but get multiple Values"
							},
							"parameters": [
								{
									"id": 689,
									"name": "filter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 690,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 691,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExported": true
													},
													"parameters": [
														{
															"id": 692,
															"name": "d",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExported": true
															},
															"type": {
																"type": "typeParameter",
																"name": "T"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/types/dictionary/dictionary.ts",
													"line": 127,
													"character": 19
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "typeParameter",
									"name": "T"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/dictionary/dictionary.ts",
							"line": 127,
							"character": 11
						}
					]
				},
				{
					"id": 673,
					"name": "GetObject",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 674,
							"name": "GetObject",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "get the Dictionary as Javascript Object"
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 675,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {
										"isExported": true
									},
									"indexSignature": [
										{
											"id": 676,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {
												"isExported": true
											},
											"parameters": [
												{
													"id": 677,
													"name": "key",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isExported": true
													},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "typeParameter",
												"name": "T"
											}
										}
									],
									"sources": [
										{
											"fileName": "src/types/dictionary/dictionary.ts",
											"line": 95,
											"character": 16
										}
									]
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/dictionary/dictionary.ts",
							"line": 95,
							"character": 13
						}
					]
				},
				{
					"id": 656,
					"name": "Keys",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 657,
							"name": "Keys",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "all Keys of the Dictionary"
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/dictionary/dictionary.ts",
							"line": 39,
							"character": 8
						}
					]
				},
				{
					"id": 664,
					"name": "Remove",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 665,
							"name": "Remove",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "remove a Entry from the Dictionary"
							},
							"parameters": [
								{
									"id": 666,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 644,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									}
								],
								"name": "Dictionary"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/dictionary/dictionary.ts",
							"line": 68,
							"character": 10
						}
					]
				},
				{
					"id": 678,
					"name": "TryGetValue",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 679,
							"name": "TryGetValue",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "try to get a Value in the Dictionary"
							},
							"parameters": [
								{
									"id": 680,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "typeParameter",
								"name": "T"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/dictionary/dictionary.ts",
							"line": 104,
							"character": 15
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						646
					]
				},
				{
					"title": "Accessors",
					"kind": 262144,
					"children": [
						652,
						654
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						658,
						662,
						667,
						670,
						681,
						687,
						673,
						656,
						664,
						678
					]
				}
			],
			"sources": [
				{
					"fileName": "src/types/dictionary/dictionary.ts",
					"line": 6,
					"character": 23
				}
			]
		},
		{
			"id": 693,
			"name": "EventHandler",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "lets create a Event Handler you can subscribe or unsubscribe"
			},
			"typeParameter": [
				{
					"id": 694,
					"name": "T",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {
						"isExported": true
					}
				}
			],
			"children": [
				{
					"id": 695,
					"name": "Invoke",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 696,
							"name": "Invoke",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "invoke the Event on the Handler"
							},
							"parameters": [
								{
									"id": 697,
									"name": "args",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "\n\n```typescript\nconst handler = new EventHandler<number>();\n// sends 1 to every Subscriber\nhandler.Invoke(1);\n```\n"
									},
									"type": {
										"type": "typeParameter",
										"name": "T"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/pattern/events/event.handler.ts",
							"line": 24,
							"character": 10
						}
					]
				},
				{
					"id": 698,
					"name": "Subscribe",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 699,
							"name": "Subscribe",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "do something when the Handler is invoked",
								"returns": "the Idx of the Subscription\n\n```typescript\nconst handler = new EventHandler<number>();\nhandler.Subscribe('X', (i) => {\n    // get the Number that was send by a Invoke call (2)\n});\nhandler.Invoke(2);\n```\n"
							},
							"parameters": [
								{
									"id": 700,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "the key to identify the subscription"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 701,
									"name": "cb",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 702,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 703,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExported": true
													},
													"parameters": [
														{
															"id": 704,
															"name": "d",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExported": true
															},
															"type": {
																"type": "typeParameter",
																"name": "T"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/pattern/events/event.handler.ts",
													"line": 42,
													"character": 30
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/pattern/events/event.handler.ts",
							"line": 42,
							"character": 13
						}
					]
				},
				{
					"id": 705,
					"name": "Unsubscribe",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 706,
							"name": "Unsubscribe",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "unsubscribe all callbacks"
							},
							"parameters": [
								{
									"id": 707,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"text": "the key to identify the Subscription to unsubscribe\n\n```typescript\nconst handler = new EventHandler<number>();\nhandler.Subscribe('X', (i) => {\n     // nothing happen here while the Handler was unsubscribe\n});\n// unsubscribe only the X Subscriber\nhandler.Unsubscribe('X');\n// unsubscribe all Subscriber\nhandler.Unsubscribe();\nhandler.Invoke(2);\n```\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/pattern/events/event.handler.ts",
							"line": 62,
							"character": 15
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						695,
						698,
						705
					]
				}
			],
			"sources": [
				{
					"fileName": "src/pattern/events/event.handler.ts",
					"line": 10,
					"character": 25
				}
			]
		},
		{
			"id": 1191,
			"name": "Guid",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "represent the Global Uniqe Identifier"
			},
			"children": [
				{
					"id": 1199,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "create a new Guid",
						"text": "generates a new one when no guid was passed\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n// returns a new generated Guid\nnew Guid();\n// returns \"6bcb9d2c-ae48-4310-8d56-ea7accffcc8c\"\nnew Guid('6bcb9d2c-ae48-4310-8d56-ea7accffcc8c');\n"
							}
						]
					},
					"signatures": [
						{
							"id": 1200,
							"name": "new Guid",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "create a new Guid",
								"text": "generates a new one when no guid was passed\n",
								"tags": [
									{
										"tag": "example",
										"text": "\n// returns a new generated Guid\nnew Guid();\n// returns \"6bcb9d2c-ae48-4310-8d56-ea7accffcc8c\"\nnew Guid('6bcb9d2c-ae48-4310-8d56-ea7accffcc8c');\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1201,
									"name": "guid",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "a new guid as string representation\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1191,
								"name": "Guid"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/guid/guid.ts",
							"line": 130,
							"character": 5
						}
					]
				},
				{
					"id": 1197,
					"name": "IsEmpty",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "is this Guid a Empty Guid",
						"returns": "matches the empty guid\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n// returns true\nnew Guid('00000000-0000-0000-0000-000000000000').IsEmpty();\n// returns false\nnew Guid('6bcb9d2c-ae48-4310-8d56-ea7accffcc8c').IsEmpty();\n"
							}
						]
					},
					"getSignature": [
						{
							"id": 1198,
							"name": "__get",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "is this Guid a Empty Guid",
								"returns": "matches the empty guid\n",
								"tags": [
									{
										"tag": "example",
										"text": "\n// returns true\nnew Guid('00000000-0000-0000-0000-000000000000').IsEmpty();\n// returns false\nnew Guid('6bcb9d2c-ae48-4310-8d56-ea7accffcc8c').IsEmpty();\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/guid/guid.ts",
							"line": 128,
							"character": 15
						}
					]
				},
				{
					"id": 1192,
					"name": "Empty",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isStatic": true,
						"isExported": true
					},
					"comment": {
						"shortText": "get a empty Guid",
						"returns": "the empty guid\n",
						"tags": [
							{
								"tag": "example",
								"text": "\n// returns \"00000000-0000-0000-0000-000000000000\"\nGuid.Empty;\n"
							}
						]
					},
					"getSignature": [
						{
							"id": 1193,
							"name": "__get",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "get a empty Guid",
								"returns": "the empty guid\n",
								"tags": [
									{
										"tag": "example",
										"text": "\n// returns \"00000000-0000-0000-0000-000000000000\"\nGuid.Empty;\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"id": 1191,
								"name": "Guid"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/guid/guid.ts",
							"line": 97,
							"character": 20
						}
					]
				},
				{
					"id": 1204,
					"name": "Equals",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1205,
							"name": "Equals",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "check if the Guid is Equal another Guid",
								"returns": "are the Guid´s equal or not\n",
								"tags": [
									{
										"tag": "example",
										"text": "\n// returns true\nnew Guid('6bcb9d2c-ae48-4310-8d56-ea7accffcc8c').Equals('6bcb9d2c-ae48-4310-8d56-ea7accffcc8c');\nnew Guid('6bcb9d2c-ae48-4310-8d56-ea7accffcc8c').Equals(new Guid('6bcb9d2c-ae48-4310-8d56-ea7accffcc8c'));\n// returns false\nnew Guid('6bcb9d2c-ae48-4310-8d56-ea7accffcc8c').Equals('4fa89189-03b5-43f2-b184-8a42adeebfe7');\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1206,
									"name": "guid",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "the guid to check"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"id": 1191,
												"name": "Guid"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/guid/guid.ts",
							"line": 182,
							"character": 10
						}
					]
				},
				{
					"id": 1202,
					"name": "ToString",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1203,
							"name": "ToString",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "converts the Guid to a String representation",
								"returns": "Guid as string\n",
								"tags": [
									{
										"tag": "example",
										"text": "\n// returns \"6bcb9d2c-ae48-4310-8d56-ea7accffcc8c\"\nnew Guid('6bcb9d2c-ae48-4310-8d56-ea7accffcc8c').ToString();\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/guid/guid.ts",
							"line": 165,
							"character": 12
						}
					]
				},
				{
					"id": 1194,
					"name": "Validate",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExported": true
					},
					"signatures": [
						{
							"id": 1195,
							"name": "Validate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "validate a Guid",
								"returns": "is the given guid string valid or not\n",
								"tags": [
									{
										"tag": "example",
										"text": "\n// returns true\nGuid.Validate('00000000-0000-0000-0000-000000000000');\n// returns false\nGuid.Validate('00000000000000000000000000000000');\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1196,
									"name": "guid",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "the guid to validate"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/guid/guid.ts",
							"line": 113,
							"character": 19
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						1199
					]
				},
				{
					"title": "Accessors",
					"kind": 262144,
					"children": [
						1197,
						1192
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1204,
						1202,
						1194
					]
				}
			],
			"sources": [
				{
					"fileName": "src/types/guid/guid.ts",
					"line": 85,
					"character": 17
				}
			]
		},
		{
			"id": 1253,
			"name": "LZCompression",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "implementation of lz compression\nwith lz-string"
			},
			"children": [
				{
					"id": 1254,
					"name": "Compress",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExported": true
					},
					"signatures": [
						{
							"id": 1255,
							"name": "Compress",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Compress any Javascript Value to a LZ String",
								"tags": [
									{
										"tag": "example",
										"text": "\n// compress the Object to a zipped JSON String\nLZCompression.Compress({\"Hello\":\"World!\"});\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1256,
									"name": "data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "a Javascript Value\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/utils/lz.ts",
							"line": 19,
							"character": 19
						}
					]
				},
				{
					"id": 1257,
					"name": "Decompress",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExported": true
					},
					"signatures": [
						{
							"id": 1258,
							"name": "Decompress",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Decompress a LZ String to any Javascript Value",
								"tags": [
									{
										"tag": "example",
										"text": "\n// decompress the zipped JSON String to a Object\nLZCompression.Compress('N4IgEgpgNlD2IC4QHVYCcoBMCEIC+QA=');\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1259,
									"name": "compressed",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "a compressed string\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/utils/lz.ts",
							"line": 32,
							"character": 21
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1254,
						1257
					]
				}
			],
			"sources": [
				{
					"fileName": "src/utils/lz.ts",
					"line": 9,
					"character": 26
				}
			]
		},
		{
			"id": 212,
			"name": "NumberFactory",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "some Utils for Integer and Double numbers"
			},
			"children": [
				{
					"id": 216,
					"name": "NewDouble",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExported": true
					},
					"signatures": [
						{
							"id": 217,
							"name": "NewDouble",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "create a new Double number from the given input",
								"returns": "the double number representation of the string or number input\n",
								"tags": [
									{
										"tag": "example",
										"text": "\n// returns 1.5\nNumberFactory.NewDouble(1.5);\nNumberFactory.NewDouble('1.5');\n// returns 0.0\nNumberFactory.NewDouble('aaa');\n"
									}
								]
							},
							"parameters": [
								{
									"id": 218,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "Javascript Number or String"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/number/number.factory.ts",
							"line": 55,
							"character": 20
						}
					]
				},
				{
					"id": 213,
					"name": "NewInteger",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExported": true
					},
					"signatures": [
						{
							"id": 214,
							"name": "NewInteger",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "create a new Integer from the given input",
								"returns": "new integer representation of the string or number\n",
								"tags": [
									{
										"tag": "example",
										"text": "\n// returns 1\nNumberFactory.NewInteger(1);\nNumberFactory.NewInteger('1');\nNumberFactory.NewInteger(1.5);\n// returns 0\nNumberFactory.NewInteger('aaaa');\n"
									}
								]
							},
							"parameters": [
								{
									"id": 215,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "Javascript Number or String that represent the new Integer"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/number/number.factory.ts",
							"line": 32,
							"character": 21
						}
					]
				},
				{
					"id": 223,
					"name": "RandomDouble",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExported": true
					},
					"signatures": [
						{
							"id": 224,
							"name": "RandomDouble",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "create Random Doubles in the min/max Border",
								"returns": "a double number between min and max\n",
								"tags": [
									{
										"tag": "example",
										"text": "\n// create all Double Numbers begins with 0.0 and ends with 1.0\nNumberFactory.RandomDouble(0, 1)\n"
									}
								]
							},
							"parameters": [
								{
									"id": 225,
									"name": "min",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "the minimum Double that can be created"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 226,
									"name": "max",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "the maximum Double that can be created"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/number/number.factory.ts",
							"line": 93,
							"character": 23
						}
					]
				},
				{
					"id": 219,
					"name": "RandomInteger",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExported": true
					},
					"signatures": [
						{
							"id": 220,
							"name": "RandomInteger",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "create Random Integers in the min/max Border",
								"returns": "a integer number between min and max\n",
								"tags": [
									{
										"tag": "example",
										"text": "\n// creates the Javascript Numbers 1,2,3,4,5,6,7,8,9 and 10\nNumberFactory.RandomInteger(1, 10);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 221,
									"name": "min",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "the minimum Integer that can be created"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 222,
									"name": "max",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "the maximum Integer that can be created"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/number/number.factory.ts",
							"line": 76,
							"character": 24
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						216,
						213,
						223,
						219
					],
					"categories": [
						{
							"title": "number",
							"children": [
								213,
								223,
								219
							]
						},
						{
							"title": "number Javascript Number or String that represent the new Double",
							"children": [
								216
							]
						}
					]
				}
			],
			"sources": [
				{
					"fileName": "src/types/number/number.factory.ts",
					"line": 15,
					"character": 26
				}
			]
		},
		{
			"id": 957,
			"name": "ObjectFactory",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Object Utils Class to perform some Operations on Objects"
			},
			"children": [
				{
					"id": 958,
					"name": "Copy",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExported": true
					},
					"signatures": [
						{
							"id": 959,
							"name": "Copy",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "copy a Object Instance and get a new one",
								"returns": "the new Object instance\n",
								"tags": [
									{
										"tag": "example",
										"text": "\n// returns {Hello:'World!'}\nObjectFactory.Copy({Hello:'World!'});\n// returns false\nconst obj = {Hello:'World!'};\nobj === ObjectFactory.Copy(obj);\n"
									}
								]
							},
							"typeParameter": [
								{
									"id": 960,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								}
							],
							"parameters": [
								{
									"id": 961,
									"name": "instance",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "the object to copy"
									},
									"type": {
										"type": "typeParameter",
										"name": "T"
									}
								}
							],
							"type": {
								"type": "typeParameter",
								"name": "T"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/object/object.factory.ts",
							"line": 27,
							"character": 15
						}
					]
				},
				{
					"id": 965,
					"name": "GetCircular",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExported": true
					},
					"signatures": [
						{
							"id": 966,
							"name": "GetCircular",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "returns the Keys of self references in Objects",
								"tags": [
									{
										"tag": "example",
										"text": "\nconst obj1 = {hello:'world',c:null};\nconst obj2 = {test:'me',c:obj1};\nobj1.c = obj2;\nconst combined = {t1:obj1,t2:obj2,t3:null};\nconst obj3 = combined;\ncombined.t3 = obj3;\n// returns ['c', 'c', 't1']\nObjectFactory.GetCircular(combined);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 967,
									"name": "obj",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "the Object to check\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/object/object.factory.ts",
							"line": 63,
							"character": 22
						}
					]
				},
				{
					"id": 962,
					"name": "IsCircular",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExported": true
					},
					"signatures": [
						{
							"id": 963,
							"name": "IsCircular",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "check if the given Object has some self references",
								"tags": [
									{
										"tag": "example",
										"text": "\nconst obj1 = {hello:'world'};\nconst obj2 = {hello:'world'};\nobj2.ref = obj2;\n// returns false while the Object has no self references\nObjectFactory.IsCircular(obj1);\n// returns true while obj2 has a self reference on the ref Property\nObjectFactory.IsCircular(obj2);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 964,
									"name": "obj",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "the Object to check\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/object/object.factory.ts",
							"line": 44,
							"character": 21
						}
					]
				},
				{
					"id": 971,
					"name": "Merge",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExported": true
					},
					"signatures": [
						{
							"id": 972,
							"name": "Merge",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "merge the child into the parent object",
								"tags": [
									{
										"tag": "example",
										"text": "\n// returns {name:'muster',age:10,state:{active:true}}\nconst obj1 = {\n     name:'muster',\n     age:10,\n};\nconst obj2 = {\n     state:{\n         active:true\n     }\n};\nObjectFactory.Merge(obj1, obj2);\n"
									}
								]
							},
							"typeParameter": [
								{
									"id": 973,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								}
							],
							"parameters": [
								{
									"id": 974,
									"name": "parent",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 975,
									"name": "child",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "typeParameter",
								"name": "T"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/object/object.factory.ts",
							"line": 118,
							"character": 16
						}
					]
				},
				{
					"id": 968,
					"name": "SizeOf",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExported": true
					},
					"signatures": [
						{
							"id": 969,
							"name": "SizeOf",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "returns the Size in Byte of a Object Instance",
								"tags": [
									{
										"tag": "example",
										"text": "\n// returns 22\nObjectFactory.SizeOf({Hello: 'World!'});\n"
									}
								]
							},
							"parameters": [
								{
									"id": 970,
									"name": "obj",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "the Object to check\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/object/object.factory.ts",
							"line": 95,
							"character": 17
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						958,
						965,
						962,
						971,
						968
					]
				}
			],
			"sources": [
				{
					"fileName": "src/types/object/object.factory.ts",
					"line": 13,
					"character": 26
				}
			]
		},
		{
			"id": 933,
			"name": "ReactiveStore",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "a Reactive Store to save States and listen to Changes"
			},
			"typeParameter": [
				{
					"id": 934,
					"name": "T",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {
						"isExported": true
					}
				}
			],
			"children": [
				{
					"id": 936,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "create a new Store with a Initial State"
					},
					"signatures": [
						{
							"id": 937,
							"name": "new ReactiveStore",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "create a new Store with a Initial State"
							},
							"parameters": [
								{
									"id": 938,
									"name": "initialState",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"shortText": "\n"
									},
									"type": {
										"type": "typeParameter",
										"name": "T"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 933,
								"name": "ReactiveStore"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/pattern/store/reactive.store.ts",
							"line": 36,
							"character": 75
						}
					]
				},
				{
					"id": 935,
					"name": "DebugMode",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "enable the Debug log for the Store\n(Logs to Console when no Action behavior was found)"
					},
					"sources": [
						{
							"fileName": "src/pattern/store/reactive.store.ts",
							"line": 34,
							"character": 13
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"defaultValue": "false"
				},
				{
					"id": 939,
					"name": "Listen",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 940,
							"name": "Listen",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "listen to a specific Property or a complete State change\nyou can use the SafeBehaviorSubject same as a BehaviorSubject but follow Functions has no effect\nnext, complete, error",
								"tags": [
									{
										"tag": "example",
										"text": "\n// write the data Property of the State into the console\nstore.Listen(s => s.data).subscribe(d => console.info(d));\n"
									}
								]
							},
							"typeParameter": [
								{
									"id": 941,
									"name": "K",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								}
							],
							"parameters": [
								{
									"id": 942,
									"name": "selector",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "select the Part of the State to Listen\n"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 943,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 944,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExported": true
													},
													"parameters": [
														{
															"id": 945,
															"name": "d",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExported": true
															},
															"type": {
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "T"
																	}
																],
																"name": "Draft"
															}
														}
													],
													"type": {
														"type": "typeParameter",
														"name": "K"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/pattern/store/reactive.store.ts",
													"line": 56,
													"character": 23
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 712,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "K"
									}
								],
								"name": "SafeBehaviorSubject"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/pattern/store/reactive.store.ts",
							"line": 56,
							"character": 10
						}
					]
				},
				{
					"id": 946,
					"name": "Mutate",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 947,
							"name": "Mutate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "mutate a specific Property or a complete State",
								"tags": [
									{
										"tag": "example",
										"text": "\n// simple Example to set the State\nstore.Mutate(s => s.data, () => newData);\n"
									},
									{
										"tag": "example",
										"text": "\n// make a complex Mutation\nstore.Mutate(s => s, old => {\n    old.data = [];\n    old.loading = true;\n    return old;\n});\n"
									}
								]
							},
							"typeParameter": [
								{
									"id": 948,
									"name": "K",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								}
							],
							"parameters": [
								{
									"id": 949,
									"name": "selector",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "select the Part of the State to Mutate"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 950,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 951,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExported": true
													},
													"parameters": [
														{
															"id": 952,
															"name": "d",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExported": true
															},
															"type": {
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "typeParameter",
																		"name": "T"
																	}
																],
																"name": "Draft"
															}
														}
													],
													"type": {
														"type": "typeParameter",
														"name": "K"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/pattern/store/reactive.store.ts",
													"line": 83,
													"character": 23
												}
											]
										}
									}
								},
								{
									"id": 953,
									"name": "mutation",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "define how to change the State\n"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 954,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 955,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExported": true
													},
													"parameters": [
														{
															"id": 956,
															"name": "s",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExported": true
															},
															"type": {
																"type": "typeParameter",
																"name": "K"
															}
														}
													],
													"type": {
														"type": "typeParameter",
														"name": "K"
													}
												}
											],
											"sources": [
												{
													"fileName": "src/pattern/store/reactive.store.ts",
													"line": 83,
													"character": 53
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/pattern/store/reactive.store.ts",
							"line": 83,
							"character": 10
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						936
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						935
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						939,
						946
					]
				}
			],
			"sources": [
				{
					"fileName": "src/pattern/store/reactive.store.ts",
					"line": 29,
					"character": 26
				}
			]
		},
		{
			"id": 712,
			"name": "SafeBehaviorSubject",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "extends the BehaviorSubject and prevent the next Method to execute"
			},
			"typeParameter": [
				{
					"id": 713,
					"name": "T",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {
						"isExported": true
					}
				}
			],
			"children": [
				{
					"id": 717,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 718,
							"name": "new SafeBehaviorSubject",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {
								"isExported": true
							},
							"parameters": [
								{
									"id": 719,
									"name": "_value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "typeParameter",
										"name": "T"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 712,
								"name": "SafeBehaviorSubject"
							},
							"overwrites": {
								"type": "reference",
								"name": "Subject.__constructor"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 717,
								"name": "BehaviorSubject.__constructor"
							}
						}
					],
					"sources": [
						{
							"fileName": "node_modules/rxjs/internal/BehaviorSubject.d.ts",
							"line": 11,
							"character": 19
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "Subject.__constructor"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 717,
						"name": "BehaviorSubject.__constructor"
					}
				},
				{
					"id": 748,
					"name": "_isScalar",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Internal implementation detail, do not use directly."
					},
					"sources": [
						{
							"fileName": "node_modules/rxjs/internal/Observable.d.ts",
							"line": 15,
							"character": 13
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 748,
						"name": "Observable._isScalar"
					}
				},
				{
					"id": 727,
					"name": "closed",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "node_modules/rxjs/internal/Subject.d.ts",
							"line": 24,
							"character": 10
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 727,
						"name": "Subject.closed"
					}
				},
				{
					"id": 729,
					"name": "hasError",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "node_modules/rxjs/internal/Subject.d.ts",
							"line": 26,
							"character": 12
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 729,
						"name": "Subject.hasError"
					}
				},
				{
					"id": 728,
					"name": "isStopped",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "node_modules/rxjs/internal/Subject.d.ts",
							"line": 25,
							"character": 13
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 728,
						"name": "Subject.isStopped"
					}
				},
				{
					"id": 726,
					"name": "observers",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "node_modules/rxjs/internal/Subject.d.ts",
							"line": 23,
							"character": 13
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "T"
								}
							],
							"name": "Observer"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 726,
						"name": "Subject.observers"
					}
				},
				{
					"id": 750,
					"name": "operator",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"tags": [
							{
								"tag": "deprecated",
								"text": "This is an internal implementation detail, do not use."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/rxjs/internal/Observable.d.ts",
							"line": 19,
							"character": 12
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "any"
							},
							{
								"type": "typeParameter",
								"name": "T"
							}
						],
						"name": "Operator"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 750,
						"name": "Observable.operator"
					}
				},
				{
					"id": 749,
					"name": "source",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"tags": [
							{
								"tag": "deprecated",
								"text": "This is an internal implementation detail, do not use."
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/rxjs/internal/Observable.d.ts",
							"line": 17,
							"character": 10
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "any"
							}
						],
						"name": "Observable"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 749,
						"name": "Observable.source"
					}
				},
				{
					"id": 730,
					"name": "thrownError",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "node_modules/rxjs/internal/Subject.d.ts",
							"line": 27,
							"character": 15
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 730,
						"name": "Subject.thrownError"
					}
				},
				{
					"id": 720,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "node_modules/rxjs/internal/BehaviorSubject.d.ts",
							"line": 13,
							"character": 18
						}
					],
					"type": {
						"type": "typeParameter",
						"name": "T"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 720,
						"name": "BehaviorSubject.value"
					}
				},
				{
					"id": 731,
					"name": "create",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExported": true
					},
					"comment": {
						"tags": [
							{
								"tag": "nocollapse",
								"text": ""
							},
							{
								"tag": "deprecated",
								"text": "use new Subject() instead\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/rxjs/internal/Subject.d.ts",
							"line": 32,
							"character": 17
						}
					],
					"type": {
						"type": "reference",
						"name": "Function"
					},
					"overwrites": {
						"type": "reference",
						"name": "Observable.create"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 731,
						"name": "Subject.create"
					}
				},
				{
					"id": 797,
					"name": "if",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExported": true
					},
					"comment": {
						"tags": [
							{
								"tag": "nocollapse",
								"text": ""
							},
							{
								"tag": "deprecated",
								"text": "In favor of iif creation function: import { iif } from 'rxjs';\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/rxjs/internal/Observable.d.ts",
							"line": 71,
							"character": 13
						}
					],
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"name": "iif"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 797,
						"name": "Observable.if"
					}
				},
				{
					"id": 798,
					"name": "throw",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExported": true
					},
					"comment": {
						"tags": [
							{
								"tag": "nocollapse",
								"text": ""
							},
							{
								"tag": "deprecated",
								"text": "In favor of throwError creation function: import { throwError } from 'rxjs';\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/rxjs/internal/Observable.d.ts",
							"line": 76,
							"character": 16
						}
					],
					"type": {
						"type": "query",
						"queryType": {
							"type": "reference",
							"name": "throwError"
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 798,
						"name": "Observable.throw"
					}
				},
				{
					"id": 721,
					"name": "_subscribe",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 722,
							"name": "_subscribe",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "deprecated",
										"text": "This is an internal implementation detail, do not use."
									}
								]
							},
							"parameters": [
								{
									"id": 723,
									"name": "subscriber",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											}
										],
										"name": "Subscriber"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Subscription"
							},
							"overwrites": {
								"type": "reference",
								"name": "Subject._subscribe"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 721,
								"name": "BehaviorSubject._subscribe"
							}
						}
					],
					"sources": [
						{
							"fileName": "node_modules/rxjs/internal/BehaviorSubject.d.ts",
							"line": 15,
							"character": 14
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "Subject._subscribe"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 721,
						"name": "BehaviorSubject._subscribe"
					}
				},
				{
					"id": 743,
					"name": "_trySubscribe",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 744,
							"name": "_trySubscribe",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "deprecated",
										"text": "This is an internal implementation detail, do not use."
									}
								]
							},
							"parameters": [
								{
									"id": 745,
									"name": "subscriber",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											}
										],
										"name": "Subscriber"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "TeardownLogic"
							},
							"overwrites": {
								"type": "reference",
								"name": "Observable._trySubscribe"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 743,
								"name": "Subject._trySubscribe"
							}
						}
					],
					"sources": [
						{
							"fileName": "node_modules/rxjs/internal/Subject.d.ts",
							"line": 39,
							"character": 17
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "Observable._trySubscribe"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 743,
						"name": "Subject._trySubscribe"
					}
				},
				{
					"id": 746,
					"name": "asObservable",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 747,
							"name": "asObservable",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Creates a new Observable with this Subject as the source. You can do this\nto create customize Observer-side logic of the Subject and conceal it from\ncode that uses the Observable.",
								"returns": "Observable that the Subject casts to\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									}
								],
								"name": "Observable"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 746,
								"name": "Subject.asObservable"
							}
						}
					],
					"sources": [
						{
							"fileName": "node_modules/rxjs/internal/Subject.d.ts",
							"line": 48,
							"character": 16
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 746,
						"name": "Subject.asObservable"
					}
				},
				{
					"id": 739,
					"name": "complete",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 740,
							"name": "complete",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 739,
								"name": "Subject.complete"
							}
						}
					],
					"sources": [
						{
							"fileName": "node_modules/rxjs/internal/Subject.d.ts",
							"line": 36,
							"character": 12
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 739,
						"name": "Subject.complete"
					}
				},
				{
					"id": 736,
					"name": "error",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 737,
							"name": "error",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"parameters": [
								{
									"id": 738,
									"name": "err",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 736,
								"name": "Subject.error"
							}
						}
					],
					"sources": [
						{
							"fileName": "node_modules/rxjs/internal/Subject.d.ts",
							"line": 35,
							"character": 9
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 736,
						"name": "Subject.error"
					}
				},
				{
					"id": 790,
					"name": "forEach",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 791,
							"name": "forEach",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"returns": "a promise that either resolves on observable completion or\n rejects with the handled error\n",
								"tags": [
									{
										"tag": "method",
										"text": "forEach"
									}
								]
							},
							"parameters": [
								{
									"id": 792,
									"name": "next",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "a handler for each value emitted by the observable"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 793,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 794,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExported": true
													},
													"parameters": [
														{
															"id": 795,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExported": true
															},
															"type": {
																"type": "typeParameter",
																"name": "T"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "node_modules/rxjs/internal/Observable.d.ts",
													"line": 64,
													"character": 17
												}
											]
										}
									}
								},
								{
									"id": 796,
									"name": "promiseCtor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"name": "PromiseConstructorLike"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 790,
								"name": "Observable.forEach"
							}
						}
					],
					"sources": [
						{
							"fileName": "node_modules/rxjs/internal/Observable.d.ts",
							"line": 64,
							"character": 11
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 790,
						"name": "Observable.forEach"
					}
				},
				{
					"id": 724,
					"name": "getValue",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 725,
							"name": "getValue",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"type": {
								"type": "typeParameter",
								"name": "T"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 724,
								"name": "BehaviorSubject.getValue"
							}
						}
					],
					"sources": [
						{
							"fileName": "node_modules/rxjs/internal/BehaviorSubject.d.ts",
							"line": 16,
							"character": 12
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 724,
						"name": "BehaviorSubject.getValue"
					}
				},
				{
					"id": 732,
					"name": "lift",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 733,
							"name": "lift",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"typeParameter": [
								{
									"id": 734,
									"name": "R",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								}
							],
							"parameters": [
								{
									"id": 735,
									"name": "operator",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											},
											{
												"type": "typeParameter",
												"name": "R"
											}
										],
										"name": "Operator"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "R"
									}
								],
								"name": "Observable"
							},
							"overwrites": {
								"type": "reference",
								"name": "Observable.lift"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 732,
								"name": "Subject.lift"
							}
						}
					],
					"sources": [
						{
							"fileName": "node_modules/rxjs/internal/Subject.d.ts",
							"line": 33,
							"character": 8
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "Observable.lift"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 732,
						"name": "Subject.lift"
					}
				},
				{
					"id": 714,
					"name": "next",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 715,
							"name": "next",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "deprecated",
										"text": "please use state.Mutation() to change the State Value\n"
									}
								]
							},
							"parameters": [
								{
									"id": 716,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "typeParameter",
										"name": "T"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"overwrites": {
								"type": "reference",
								"name": "BehaviorSubject.next"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/pattern/store/reactive.store.ts",
							"line": 15,
							"character": 8
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "BehaviorSubject.next"
					}
				},
				{
					"id": 799,
					"name": "pipe",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 800,
							"name": "pipe",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									}
								],
								"name": "Observable"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 799,
								"name": "Observable.pipe"
							}
						},
						{
							"id": 801,
							"name": "pipe",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"typeParameter": [
								{
									"id": 802,
									"name": "A",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								}
							],
							"parameters": [
								{
									"id": 803,
									"name": "op1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											},
											{
												"type": "typeParameter",
												"name": "A"
											}
										],
										"name": "OperatorFunction"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "A"
									}
								],
								"name": "Observable"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 799,
								"name": "Observable.pipe"
							}
						},
						{
							"id": 804,
							"name": "pipe",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"typeParameter": [
								{
									"id": 805,
									"name": "A",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								},
								{
									"id": 806,
									"name": "B",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								}
							],
							"parameters": [
								{
									"id": 807,
									"name": "op1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											},
											{
												"type": "typeParameter",
												"name": "A"
											}
										],
										"name": "OperatorFunction"
									}
								},
								{
									"id": 808,
									"name": "op2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "A"
											},
											{
												"type": "typeParameter",
												"name": "B"
											}
										],
										"name": "OperatorFunction"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "B"
									}
								],
								"name": "Observable"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 799,
								"name": "Observable.pipe"
							}
						},
						{
							"id": 809,
							"name": "pipe",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"typeParameter": [
								{
									"id": 810,
									"name": "A",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								},
								{
									"id": 811,
									"name": "B",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								},
								{
									"id": 812,
									"name": "C",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								}
							],
							"parameters": [
								{
									"id": 813,
									"name": "op1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											},
											{
												"type": "typeParameter",
												"name": "A"
											}
										],
										"name": "OperatorFunction"
									}
								},
								{
									"id": 814,
									"name": "op2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "A"
											},
											{
												"type": "typeParameter",
												"name": "B"
											}
										],
										"name": "OperatorFunction"
									}
								},
								{
									"id": 815,
									"name": "op3",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "B"
											},
											{
												"type": "typeParameter",
												"name": "C"
											}
										],
										"name": "OperatorFunction"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "C"
									}
								],
								"name": "Observable"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 799,
								"name": "Observable.pipe"
							}
						},
						{
							"id": 816,
							"name": "pipe",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"typeParameter": [
								{
									"id": 817,
									"name": "A",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								},
								{
									"id": 818,
									"name": "B",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								},
								{
									"id": 819,
									"name": "C",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								},
								{
									"id": 820,
									"name": "D",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								}
							],
							"parameters": [
								{
									"id": 821,
									"name": "op1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											},
											{
												"type": "typeParameter",
												"name": "A"
											}
										],
										"name": "OperatorFunction"
									}
								},
								{
									"id": 822,
									"name": "op2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "A"
											},
											{
												"type": "typeParameter",
												"name": "B"
											}
										],
										"name": "OperatorFunction"
									}
								},
								{
									"id": 823,
									"name": "op3",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "B"
											},
											{
												"type": "typeParameter",
												"name": "C"
											}
										],
										"name": "OperatorFunction"
									}
								},
								{
									"id": 824,
									"name": "op4",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "C"
											},
											{
												"type": "typeParameter",
												"name": "D"
											}
										],
										"name": "OperatorFunction"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "D"
									}
								],
								"name": "Observable"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 799,
								"name": "Observable.pipe"
							}
						},
						{
							"id": 825,
							"name": "pipe",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"typeParameter": [
								{
									"id": 826,
									"name": "A",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								},
								{
									"id": 827,
									"name": "B",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								},
								{
									"id": 828,
									"name": "C",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								},
								{
									"id": 829,
									"name": "D",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								},
								{
									"id": 830,
									"name": "E",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								}
							],
							"parameters": [
								{
									"id": 831,
									"name": "op1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											},
											{
												"type": "typeParameter",
												"name": "A"
											}
										],
										"name": "OperatorFunction"
									}
								},
								{
									"id": 832,
									"name": "op2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "A"
											},
											{
												"type": "typeParameter",
												"name": "B"
											}
										],
										"name": "OperatorFunction"
									}
								},
								{
									"id": 833,
									"name": "op3",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "B"
											},
											{
												"type": "typeParameter",
												"name": "C"
											}
										],
										"name": "OperatorFunction"
									}
								},
								{
									"id": 834,
									"name": "op4",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "C"
											},
											{
												"type": "typeParameter",
												"name": "D"
											}
										],
										"name": "OperatorFunction"
									}
								},
								{
									"id": 835,
									"name": "op5",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "D"
											},
											{
												"type": "typeParameter",
												"name": "E"
											}
										],
										"name": "OperatorFunction"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "E"
									}
								],
								"name": "Observable"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 799,
								"name": "Observable.pipe"
							}
						},
						{
							"id": 836,
							"name": "pipe",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"typeParameter": [
								{
									"id": 837,
									"name": "A",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								},
								{
									"id": 838,
									"name": "B",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								},
								{
									"id": 839,
									"name": "C",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								},
								{
									"id": 840,
									"name": "D",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								},
								{
									"id": 841,
									"name": "E",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								},
								{
									"id": 842,
									"name": "F",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								}
							],
							"parameters": [
								{
									"id": 843,
									"name": "op1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											},
											{
												"type": "typeParameter",
												"name": "A"
											}
										],
										"name": "OperatorFunction"
									}
								},
								{
									"id": 844,
									"name": "op2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "A"
											},
											{
												"type": "typeParameter",
												"name": "B"
											}
										],
										"name": "OperatorFunction"
									}
								},
								{
									"id": 845,
									"name": "op3",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "B"
											},
											{
												"type": "typeParameter",
												"name": "C"
											}
										],
										"name": "OperatorFunction"
									}
								},
								{
									"id": 846,
									"name": "op4",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "C"
											},
											{
												"type": "typeParameter",
												"name": "D"
											}
										],
										"name": "OperatorFunction"
									}
								},
								{
									"id": 847,
									"name": "op5",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "D"
											},
											{
												"type": "typeParameter",
												"name": "E"
											}
										],
										"name": "OperatorFunction"
									}
								},
								{
									"id": 848,
									"name": "op6",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											},
											{
												"type": "typeParameter",
												"name": "F"
											}
										],
										"name": "OperatorFunction"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "F"
									}
								],
								"name": "Observable"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 799,
								"name": "Observable.pipe"
							}
						},
						{
							"id": 849,
							"name": "pipe",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"typeParameter": [
								{
									"id": 850,
									"name": "A",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								},
								{
									"id": 851,
									"name": "B",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								},
								{
									"id": 852,
									"name": "C",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								},
								{
									"id": 853,
									"name": "D",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								},
								{
									"id": 854,
									"name": "E",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								},
								{
									"id": 855,
									"name": "F",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								},
								{
									"id": 856,
									"name": "G",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								}
							],
							"parameters": [
								{
									"id": 857,
									"name": "op1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											},
											{
												"type": "typeParameter",
												"name": "A"
											}
										],
										"name": "OperatorFunction"
									}
								},
								{
									"id": 858,
									"name": "op2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "A"
											},
											{
												"type": "typeParameter",
												"name": "B"
											}
										],
										"name": "OperatorFunction"
									}
								},
								{
									"id": 859,
									"name": "op3",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "B"
											},
											{
												"type": "typeParameter",
												"name": "C"
											}
										],
										"name": "OperatorFunction"
									}
								},
								{
									"id": 860,
									"name": "op4",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "C"
											},
											{
												"type": "typeParameter",
												"name": "D"
											}
										],
										"name": "OperatorFunction"
									}
								},
								{
									"id": 861,
									"name": "op5",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "D"
											},
											{
												"type": "typeParameter",
												"name": "E"
											}
										],
										"name": "OperatorFunction"
									}
								},
								{
									"id": 862,
									"name": "op6",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											},
											{
												"type": "typeParameter",
												"name": "F"
											}
										],
										"name": "OperatorFunction"
									}
								},
								{
									"id": 863,
									"name": "op7",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "F"
											},
											{
												"type": "typeParameter",
												"name": "G"
											}
										],
										"name": "OperatorFunction"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "G"
									}
								],
								"name": "Observable"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 799,
								"name": "Observable.pipe"
							}
						},
						{
							"id": 864,
							"name": "pipe",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"typeParameter": [
								{
									"id": 865,
									"name": "A",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								},
								{
									"id": 866,
									"name": "B",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								},
								{
									"id": 867,
									"name": "C",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								},
								{
									"id": 868,
									"name": "D",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								},
								{
									"id": 869,
									"name": "E",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								},
								{
									"id": 870,
									"name": "F",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								},
								{
									"id": 871,
									"name": "G",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								},
								{
									"id": 872,
									"name": "H",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								}
							],
							"parameters": [
								{
									"id": 873,
									"name": "op1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											},
											{
												"type": "typeParameter",
												"name": "A"
											}
										],
										"name": "OperatorFunction"
									}
								},
								{
									"id": 874,
									"name": "op2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "A"
											},
											{
												"type": "typeParameter",
												"name": "B"
											}
										],
										"name": "OperatorFunction"
									}
								},
								{
									"id": 875,
									"name": "op3",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "B"
											},
											{
												"type": "typeParameter",
												"name": "C"
											}
										],
										"name": "OperatorFunction"
									}
								},
								{
									"id": 876,
									"name": "op4",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "C"
											},
											{
												"type": "typeParameter",
												"name": "D"
											}
										],
										"name": "OperatorFunction"
									}
								},
								{
									"id": 877,
									"name": "op5",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "D"
											},
											{
												"type": "typeParameter",
												"name": "E"
											}
										],
										"name": "OperatorFunction"
									}
								},
								{
									"id": 878,
									"name": "op6",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											},
											{
												"type": "typeParameter",
												"name": "F"
											}
										],
										"name": "OperatorFunction"
									}
								},
								{
									"id": 879,
									"name": "op7",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "F"
											},
											{
												"type": "typeParameter",
												"name": "G"
											}
										],
										"name": "OperatorFunction"
									}
								},
								{
									"id": 880,
									"name": "op8",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "G"
											},
											{
												"type": "typeParameter",
												"name": "H"
											}
										],
										"name": "OperatorFunction"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "H"
									}
								],
								"name": "Observable"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 799,
								"name": "Observable.pipe"
							}
						},
						{
							"id": 881,
							"name": "pipe",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"typeParameter": [
								{
									"id": 882,
									"name": "A",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								},
								{
									"id": 883,
									"name": "B",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								},
								{
									"id": 884,
									"name": "C",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								},
								{
									"id": 885,
									"name": "D",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								},
								{
									"id": 886,
									"name": "E",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								},
								{
									"id": 887,
									"name": "F",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								},
								{
									"id": 888,
									"name": "G",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								},
								{
									"id": 889,
									"name": "H",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								},
								{
									"id": 890,
									"name": "I",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								}
							],
							"parameters": [
								{
									"id": 891,
									"name": "op1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											},
											{
												"type": "typeParameter",
												"name": "A"
											}
										],
										"name": "OperatorFunction"
									}
								},
								{
									"id": 892,
									"name": "op2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "A"
											},
											{
												"type": "typeParameter",
												"name": "B"
											}
										],
										"name": "OperatorFunction"
									}
								},
								{
									"id": 893,
									"name": "op3",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "B"
											},
											{
												"type": "typeParameter",
												"name": "C"
											}
										],
										"name": "OperatorFunction"
									}
								},
								{
									"id": 894,
									"name": "op4",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "C"
											},
											{
												"type": "typeParameter",
												"name": "D"
											}
										],
										"name": "OperatorFunction"
									}
								},
								{
									"id": 895,
									"name": "op5",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "D"
											},
											{
												"type": "typeParameter",
												"name": "E"
											}
										],
										"name": "OperatorFunction"
									}
								},
								{
									"id": 896,
									"name": "op6",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											},
											{
												"type": "typeParameter",
												"name": "F"
											}
										],
										"name": "OperatorFunction"
									}
								},
								{
									"id": 897,
									"name": "op7",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "F"
											},
											{
												"type": "typeParameter",
												"name": "G"
											}
										],
										"name": "OperatorFunction"
									}
								},
								{
									"id": 898,
									"name": "op8",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "G"
											},
											{
												"type": "typeParameter",
												"name": "H"
											}
										],
										"name": "OperatorFunction"
									}
								},
								{
									"id": 899,
									"name": "op9",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "H"
											},
											{
												"type": "typeParameter",
												"name": "I"
											}
										],
										"name": "OperatorFunction"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "I"
									}
								],
								"name": "Observable"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 799,
								"name": "Observable.pipe"
							}
						},
						{
							"id": 900,
							"name": "pipe",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"typeParameter": [
								{
									"id": 901,
									"name": "A",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								},
								{
									"id": 902,
									"name": "B",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								},
								{
									"id": 903,
									"name": "C",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								},
								{
									"id": 904,
									"name": "D",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								},
								{
									"id": 905,
									"name": "E",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								},
								{
									"id": 906,
									"name": "F",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								},
								{
									"id": 907,
									"name": "G",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								},
								{
									"id": 908,
									"name": "H",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								},
								{
									"id": 909,
									"name": "I",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								}
							],
							"parameters": [
								{
									"id": 910,
									"name": "op1",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											},
											{
												"type": "typeParameter",
												"name": "A"
											}
										],
										"name": "OperatorFunction"
									}
								},
								{
									"id": 911,
									"name": "op2",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "A"
											},
											{
												"type": "typeParameter",
												"name": "B"
											}
										],
										"name": "OperatorFunction"
									}
								},
								{
									"id": 912,
									"name": "op3",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "B"
											},
											{
												"type": "typeParameter",
												"name": "C"
											}
										],
										"name": "OperatorFunction"
									}
								},
								{
									"id": 913,
									"name": "op4",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "C"
											},
											{
												"type": "typeParameter",
												"name": "D"
											}
										],
										"name": "OperatorFunction"
									}
								},
								{
									"id": 914,
									"name": "op5",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "D"
											},
											{
												"type": "typeParameter",
												"name": "E"
											}
										],
										"name": "OperatorFunction"
									}
								},
								{
									"id": 915,
									"name": "op6",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "E"
											},
											{
												"type": "typeParameter",
												"name": "F"
											}
										],
										"name": "OperatorFunction"
									}
								},
								{
									"id": 916,
									"name": "op7",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "F"
											},
											{
												"type": "typeParameter",
												"name": "G"
											}
										],
										"name": "OperatorFunction"
									}
								},
								{
									"id": 917,
									"name": "op8",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "G"
											},
											{
												"type": "typeParameter",
												"name": "H"
											}
										],
										"name": "OperatorFunction"
									}
								},
								{
									"id": 918,
									"name": "op9",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "H"
											},
											{
												"type": "typeParameter",
												"name": "I"
											}
										],
										"name": "OperatorFunction"
									}
								},
								{
									"id": 919,
									"name": "operations",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true,
										"isRest": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "intrinsic",
													"name": "any"
												},
												{
													"type": "intrinsic",
													"name": "any"
												}
											],
											"name": "OperatorFunction"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 920,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExported": true
											},
											"sources": [
												{
													"fileName": "node_modules/rxjs/internal/Observable.d.ts",
													"line": 87,
													"character": 354
												}
											]
										}
									}
								],
								"name": "Observable"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 799,
								"name": "Observable.pipe"
							}
						}
					],
					"sources": [
						{
							"fileName": "node_modules/rxjs/internal/Observable.d.ts",
							"line": 77,
							"character": 8
						},
						{
							"fileName": "node_modules/rxjs/internal/Observable.d.ts",
							"line": 78,
							"character": 8
						},
						{
							"fileName": "node_modules/rxjs/internal/Observable.d.ts",
							"line": 79,
							"character": 8
						},
						{
							"fileName": "node_modules/rxjs/internal/Observable.d.ts",
							"line": 80,
							"character": 8
						},
						{
							"fileName": "node_modules/rxjs/internal/Observable.d.ts",
							"line": 81,
							"character": 8
						},
						{
							"fileName": "node_modules/rxjs/internal/Observable.d.ts",
							"line": 82,
							"character": 8
						},
						{
							"fileName": "node_modules/rxjs/internal/Observable.d.ts",
							"line": 83,
							"character": 8
						},
						{
							"fileName": "node_modules/rxjs/internal/Observable.d.ts",
							"line": 84,
							"character": 8
						},
						{
							"fileName": "node_modules/rxjs/internal/Observable.d.ts",
							"line": 85,
							"character": 8
						},
						{
							"fileName": "node_modules/rxjs/internal/Observable.d.ts",
							"line": 86,
							"character": 8
						},
						{
							"fileName": "node_modules/rxjs/internal/Observable.d.ts",
							"line": 87,
							"character": 8
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 799,
						"name": "Observable.pipe"
					}
				},
				{
					"id": 751,
					"name": "subscribe",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 752,
							"name": "subscribe",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"parameters": [
								{
									"id": 753,
									"name": "observer",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											}
										],
										"name": "PartialObserver"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Subscription"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 751,
								"name": "Observable.subscribe"
							}
						},
						{
							"id": 754,
							"name": "subscribe",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "deprecated",
										"text": "Use an observer instead of a complete callback"
									}
								]
							},
							"parameters": [
								{
									"id": 755,
									"name": "next",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "null"
											},
											{
												"type": "intrinsic",
												"name": "undefined"
											}
										]
									}
								},
								{
									"id": 756,
									"name": "error",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "null"
											},
											{
												"type": "intrinsic",
												"name": "undefined"
											}
										]
									}
								},
								{
									"id": 757,
									"name": "complete",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 758,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 759,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExported": true
													},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "node_modules/rxjs/internal/Observable.d.ts",
													"line": 49,
													"character": 72
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Subscription"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 751,
								"name": "Observable.subscribe"
							}
						},
						{
							"id": 760,
							"name": "subscribe",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "deprecated",
										"text": "Use an observer instead of an error callback"
									}
								]
							},
							"parameters": [
								{
									"id": 761,
									"name": "next",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "null"
											},
											{
												"type": "intrinsic",
												"name": "undefined"
											}
										]
									}
								},
								{
									"id": 762,
									"name": "error",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 763,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 764,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExported": true
													},
													"parameters": [
														{
															"id": 765,
															"name": "error",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExported": true
															},
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "node_modules/rxjs/internal/Observable.d.ts",
													"line": 51,
													"character": 44
												}
											]
										}
									}
								},
								{
									"id": 766,
									"name": "complete",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 767,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 768,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExported": true
													},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "node_modules/rxjs/internal/Observable.d.ts",
													"line": 51,
													"character": 77
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Subscription"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 751,
								"name": "Observable.subscribe"
							}
						},
						{
							"id": 769,
							"name": "subscribe",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"tags": [
									{
										"tag": "deprecated",
										"text": "Use an observer instead of a complete callback"
									}
								]
							},
							"parameters": [
								{
									"id": 770,
									"name": "next",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 771,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 772,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExported": true
													},
													"parameters": [
														{
															"id": 773,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExported": true
															},
															"type": {
																"type": "typeParameter",
																"name": "T"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "node_modules/rxjs/internal/Observable.d.ts",
													"line": 53,
													"character": 19
												}
											]
										}
									}
								},
								{
									"id": 774,
									"name": "error",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "null"
											},
											{
												"type": "intrinsic",
												"name": "undefined"
											}
										]
									}
								},
								{
									"id": 775,
									"name": "complete",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 776,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 777,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExported": true
													},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "node_modules/rxjs/internal/Observable.d.ts",
													"line": 53,
													"character": 74
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Subscription"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 751,
								"name": "Observable.subscribe"
							}
						},
						{
							"id": 778,
							"name": "subscribe",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"parameters": [
								{
									"id": 779,
									"name": "next",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 780,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 781,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExported": true
													},
													"parameters": [
														{
															"id": 782,
															"name": "value",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExported": true
															},
															"type": {
																"type": "typeParameter",
																"name": "T"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "node_modules/rxjs/internal/Observable.d.ts",
													"line": 54,
													"character": 20
												}
											]
										}
									}
								},
								{
									"id": 783,
									"name": "error",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 784,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 785,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExported": true
													},
													"parameters": [
														{
															"id": 786,
															"name": "error",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isExported": true
															},
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "node_modules/rxjs/internal/Observable.d.ts",
													"line": 54,
													"character": 48
												}
											]
										}
									}
								},
								{
									"id": 787,
									"name": "complete",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 788,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExported": true
											},
											"signatures": [
												{
													"id": 789,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExported": true
													},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											],
											"sources": [
												{
													"fileName": "node_modules/rxjs/internal/Observable.d.ts",
													"line": 54,
													"character": 81
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Subscription"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 751,
								"name": "Observable.subscribe"
							}
						}
					],
					"sources": [
						{
							"fileName": "node_modules/rxjs/internal/Observable.d.ts",
							"line": 47,
							"character": 13
						},
						{
							"fileName": "node_modules/rxjs/internal/Observable.d.ts",
							"line": 49,
							"character": 13
						},
						{
							"fileName": "node_modules/rxjs/internal/Observable.d.ts",
							"line": 51,
							"character": 13
						},
						{
							"fileName": "node_modules/rxjs/internal/Observable.d.ts",
							"line": 53,
							"character": 13
						},
						{
							"fileName": "node_modules/rxjs/internal/Observable.d.ts",
							"line": 54,
							"character": 13
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 751,
						"name": "Observable.subscribe"
					}
				},
				{
					"id": 921,
					"name": "toPromise",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 922,
							"name": "toPromise",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"typeParameter": [
								{
									"id": 923,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								}
							],
							"parameters": [
								{
									"id": 924,
									"name": "this",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											}
										],
										"name": "Observable"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									}
								],
								"name": "Promise"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 921,
								"name": "Observable.toPromise"
							}
						},
						{
							"id": 925,
							"name": "toPromise",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"typeParameter": [
								{
									"id": 926,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								}
							],
							"parameters": [
								{
									"id": 927,
									"name": "this",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											}
										],
										"name": "Observable"
									}
								},
								{
									"id": 928,
									"name": "PromiseCtor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "query",
										"queryType": {
											"type": "reference",
											"name": "Promise"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									}
								],
								"name": "Promise"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 921,
								"name": "Observable.toPromise"
							}
						},
						{
							"id": 929,
							"name": "toPromise",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"typeParameter": [
								{
									"id": 930,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExported": true
									}
								}
							],
							"parameters": [
								{
									"id": 931,
									"name": "this",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											}
										],
										"name": "Observable"
									}
								},
								{
									"id": 932,
									"name": "PromiseCtor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "reference",
										"name": "PromiseConstructorLike"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									}
								],
								"name": "Promise"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 921,
								"name": "Observable.toPromise"
							}
						}
					],
					"sources": [
						{
							"fileName": "node_modules/rxjs/internal/Observable.d.ts",
							"line": 88,
							"character": 13
						},
						{
							"fileName": "node_modules/rxjs/internal/Observable.d.ts",
							"line": 89,
							"character": 13
						},
						{
							"fileName": "node_modules/rxjs/internal/Observable.d.ts",
							"line": 90,
							"character": 13
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 921,
						"name": "Observable.toPromise"
					}
				},
				{
					"id": 741,
					"name": "unsubscribe",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 742,
							"name": "unsubscribe",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 741,
								"name": "Subject.unsubscribe"
							}
						}
					],
					"sources": [
						{
							"fileName": "node_modules/rxjs/internal/Subject.d.ts",
							"line": 37,
							"character": 15
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 741,
						"name": "Subject.unsubscribe"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						717
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						748,
						727,
						729,
						728,
						726,
						750,
						749,
						730,
						720,
						731,
						797,
						798
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						721,
						743,
						746,
						739,
						736,
						790,
						724,
						732,
						714,
						799,
						751,
						921,
						741
					]
				}
			],
			"sources": [
				{
					"fileName": "src/pattern/store/reactive.store.ts",
					"line": 11,
					"character": 32
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "T"
						}
					],
					"name": "BehaviorSubject"
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "T"
						}
					],
					"name": "Subscribable"
				},
				{
					"type": "reference",
					"name": "SubscriptionLike"
				}
			]
		},
		{
			"id": 1260,
			"name": "StopWatch",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "measure the Time between Code Lines in ms",
				"text": "the StopWatch starts when a new Instance was created and can give the Elapsed ms when ElapsedMs was called.\n\nmeasure multiple Times is also possible with SectionStart and SectionElapsedMs\n"
			},
			"children": [
				{
					"id": 1261,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "create a new StopWatch Instance at this Time the StopWatch was started",
						"tags": [
							{
								"tag": "example",
								"text": "\nconst watch = new StopWatch();\n// returns the elapsed Ms from construction and this Line\nwatch.ElapsedMs();\n"
							}
						]
					},
					"signatures": [
						{
							"id": 1262,
							"name": "new StopWatch",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "create a new StopWatch Instance at this Time the StopWatch was started",
								"tags": [
									{
										"tag": "example",
										"text": "\nconst watch = new StopWatch();\n// returns the elapsed Ms from construction and this Line\nwatch.ElapsedMs();\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"id": 1260,
								"name": "StopWatch"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/utils/stopwatch.ts",
							"line": 22,
							"character": 60
						}
					]
				},
				{
					"id": 1269,
					"name": "IsPause",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "if the current StopWatch in pause mode",
						"tags": [
							{
								"tag": "example",
								"text": "\nconst sw = new StopWatch();\n// returns false\nsw.IsPause();\nsw.Pause();\n// returns true\nsw.IsPause();\n"
							}
						]
					},
					"getSignature": [
						{
							"id": 1270,
							"name": "__get",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "if the current StopWatch in pause mode",
								"tags": [
									{
										"tag": "example",
										"text": "\nconst sw = new StopWatch();\n// returns false\nsw.IsPause();\nsw.Pause();\n// returns true\nsw.IsPause();\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/utils/stopwatch.ts",
							"line": 88,
							"character": 15
						}
					]
				},
				{
					"id": 1284,
					"name": "ElapsedMs",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true,
						"isExported": true
					},
					"signatures": [
						{
							"id": 1285,
							"name": "ElapsedMs",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "gets the Elapsed Time in ms from the StopWatch",
								"tags": [
									{
										"tag": "example",
										"text": "\nconst sw = StopWatch();\n// get the elapsed time in ms from StopWatch constructor\nsw.ElapsedMs();\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/utils/stopwatch.ts",
							"line": 184,
							"character": 20
						}
					]
				},
				{
					"id": 1266,
					"name": "IsSectionPause",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true,
						"isExported": true
					},
					"signatures": [
						{
							"id": 1267,
							"name": "IsSectionPause",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "checks if a Section was paused",
								"tags": [
									{
										"tag": "example",
										"text": "\nconst sw = new StopWatch();\nsw.SectionStart('sw1');\n// returns false\nsw.IsSectionPause('sw1');\nsw.SectionPause('sw1');\n// returns true\nsw.IsSectionPause('sw1');\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1268,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "the key that indicates the Section\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/utils/stopwatch.ts",
							"line": 73,
							"character": 25
						}
					]
				},
				{
					"id": 1280,
					"name": "Pause",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true,
						"isExported": true
					},
					"signatures": [
						{
							"id": 1281,
							"name": "Pause",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "stops the StopWatch from measure Time",
								"tags": [
									{
										"tag": "example",
										"text": "\nconst sw = new StopWatch();\n// pause the StopWatch\nsw.Pause();\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/utils/stopwatch.ts",
							"line": 157,
							"character": 16
						}
					]
				},
				{
					"id": 1282,
					"name": "Resume",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true,
						"isExported": true
					},
					"signatures": [
						{
							"id": 1283,
							"name": "Resume",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "starts the StopWatch at the Point from the Last Pause",
								"tags": [
									{
										"tag": "example",
										"text": "\nconst sw = new StopWatch();\nsw.Pause();\n// resume the paused StopWatch\nsw.Resume();\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/utils/stopwatch.ts",
							"line": 171,
							"character": 17
						}
					]
				},
				{
					"id": 1271,
					"name": "SectionElapsedMs",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true,
						"isExported": true
					},
					"signatures": [
						{
							"id": 1272,
							"name": "SectionElapsedMs",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "get the Time in ms Elapsed by the Section matches the given key",
								"tags": [
									{
										"tag": "example",
										"text": "\nconst sw = new StopWatch();\nsw.SectionStart('sw1');\n// returns the elapsed milliseconds since start of section sw1\nsw.SectionElapsedMs('sw1');\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1273,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "the key that indicates the Section\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/utils/stopwatch.ts",
							"line": 103,
							"character": 27
						}
					]
				},
				{
					"id": 1274,
					"name": "SectionPause",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true,
						"isExported": true
					},
					"signatures": [
						{
							"id": 1275,
							"name": "SectionPause",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "same as Pause only for Sections",
								"tags": [
									{
										"tag": "example",
										"text": "\nconst sw = new StopWatch();\nsw.SectionStart('sw1');\n// pause the sw1 section\nsw.SectionPause('sw1');\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1276,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "the key that indicates the Section\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/utils/stopwatch.ts",
							"line": 127,
							"character": 23
						}
					]
				},
				{
					"id": 1277,
					"name": "SectionResume",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true,
						"isExported": true
					},
					"signatures": [
						{
							"id": 1278,
							"name": "SectionResume",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "same as Resume only for Sections",
								"tags": [
									{
										"tag": "example",
										"text": "\nconst sw = new StopWatch();\nsw.SectionStart('sw1');\nsw.SectionPause('sw1');\n// restart the sw1 section\nsw.SectionResume('sw1');\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1279,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "the key that indicates the Section\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/utils/stopwatch.ts",
							"line": 144,
							"character": 24
						}
					]
				},
				{
					"id": 1263,
					"name": "SectionStart",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPublic": true,
						"isExported": true
					},
					"signatures": [
						{
							"id": 1264,
							"name": "SectionStart",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "starts the StopWatch for a specific Section marks by the given key",
								"tags": [
									{
										"tag": "example",
										"text": "\nconst watch = new StopWatch();\nwatch.SectionStart('A');\n// logs the Time between SectionStart('A') and SectionElapsedMs('A')\nwatch.SectionElapsedMs('A');\nwatch.SectionStart('B');\n// logs the Time between SectionStart('B') and SectionElapsedMs('B')\nwatch.SectionElapsedMs('B');\n// logs the Time between SectionStart('A') and this Line with SectionStart('B') and SectionElapsedMs('B')\nwatch.SectionElapsedMs('A');\n"
									}
								]
							},
							"parameters": [
								{
									"id": 1265,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "the key that indicates the Section\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/utils/stopwatch.ts",
							"line": 53,
							"character": 23
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						1261
					]
				},
				{
					"title": "Accessors",
					"kind": 262144,
					"children": [
						1269
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1284,
						1266,
						1280,
						1282,
						1271,
						1274,
						1277,
						1263
					]
				}
			],
			"sources": [
				{
					"fileName": "src/utils/stopwatch.ts",
					"line": 16,
					"character": 22
				}
			]
		},
		{
			"id": 282,
			"name": "StringFactory",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "some Utils for Strings"
			},
			"children": [
				{
					"id": 283,
					"name": "IsNullOrEmpty",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExported": true
					},
					"signatures": [
						{
							"id": 284,
							"name": "IsNullOrEmpty",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "check if a String is empty or null",
								"returns": "is the given string defined and not empty or not\n",
								"tags": [
									{
										"tag": "example",
										"text": "\n// is true\nStringFactory.IsNullOrEmpty(undefined);\nStringFactory.IsNullOrEmpty(null);\nStringFactory.IsNullOrEmpty('');\n// is false\nStringFactory.IsNullOrEmpty('a');\n"
									}
								]
							},
							"parameters": [
								{
									"id": 285,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "the string to check"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/string/string.factory.ts",
							"line": 28,
							"character": 24
						}
					]
				},
				{
					"id": 286,
					"name": "RandomAlphaString",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExported": true
					},
					"signatures": [
						{
							"id": 287,
							"name": "RandomAlphaString",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "generate a Random String with given Size",
								"text": "use only letters a-z\n",
								"returns": "a random string with letters from a-z\n",
								"tags": [
									{
										"tag": "example",
										"text": "\n// returns a random string with 12 bytes length\nStringFactory.RandomAlphaString(12);\n"
									}
								]
							},
							"parameters": [
								{
									"id": 288,
									"name": "length",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "the Size of the String"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/string/string.factory.ts",
							"line": 46,
							"character": 28
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						283,
						286
					],
					"categories": [
						{
							"title": "string",
							"children": [
								283,
								286
							]
						}
					]
				}
			],
			"sources": [
				{
					"fileName": "src/types/string/string.factory.ts",
					"line": 11,
					"character": 26
				}
			]
		},
		{
			"id": 1725,
			"name": "TestDataGenerator",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "create some random Objects"
			},
			"children": [
				{
					"id": 1726,
					"name": "Object",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExported": true
					},
					"signatures": [
						{
							"id": 1727,
							"name": "Object",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "generate a random object between the min max size in bytes"
							},
							"parameters": [
								{
									"id": 1728,
									"name": "min",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "minimum size of the generated objects"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1729,
									"name": "max",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"text": "maximum size of the generated objects"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1730,
									"name": "keySize",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"text": "fix key size in bytes"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1731,
									"name": "valueSize",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"text": "fix value size in bytes\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/utils/test.data.generator.ts",
							"line": 19,
							"character": 17
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1726
					]
				}
			],
			"sources": [
				{
					"fileName": "src/utils/test.data.generator.ts",
					"line": 10,
					"character": 30
				}
			]
		},
		{
			"id": 994,
			"name": "TimeSpan",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "represents a duration from milliseconds to days"
			},
			"children": [
				{
					"id": 1027,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "create a new TimeSpan"
					},
					"signatures": [
						{
							"id": 1028,
							"name": "new TimeSpan",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "create a new TimeSpan"
							},
							"parameters": [
								{
									"id": 1029,
									"name": "hours",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1030,
									"name": "minutes",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1031,
									"name": "seconds",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1032,
									"name": "milliseconds",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 1033,
									"name": "days",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 994,
								"name": "TimeSpan"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/time.span.ts",
							"line": 213,
							"character": 5
						}
					]
				},
				{
					"id": 996,
					"name": "HoursPerDay",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExported": true
					},
					"comment": {
						"shortText": "how much Hours have one Day"
					},
					"sources": [
						{
							"fileName": "src/types/datetime/time.span.ts",
							"line": 84,
							"character": 22
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "24"
				},
				{
					"id": 999,
					"name": "MillisecondsPerDay",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExported": true
					},
					"comment": {
						"shortText": "how much Milliseconds have one Day"
					},
					"sources": [
						{
							"fileName": "src/types/datetime/time.span.ts",
							"line": 96,
							"character": 29
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "TimeSpan.SecondsPerDay * TimeSpan.MillisecondsPerSecond"
				},
				{
					"id": 1002,
					"name": "MillisecondsPerHour",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExported": true
					},
					"comment": {
						"shortText": "Milliseconds in one Hour"
					},
					"sources": [
						{
							"fileName": "src/types/datetime/time.span.ts",
							"line": 108,
							"character": 30
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "TimeSpan.SecondsPerHour * TimeSpan.MillisecondsPerSecond"
				},
				{
					"id": 1004,
					"name": "MillisecondsPerMinute",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExported": true
					},
					"comment": {
						"shortText": "Milliseconds in one Minute"
					},
					"sources": [
						{
							"fileName": "src/types/datetime/time.span.ts",
							"line": 116,
							"character": 32
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "TimeSpan.SecondsPerMinute * TimeSpan.MillisecondsPerSecond"
				},
				{
					"id": 995,
					"name": "MillisecondsPerSecond",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExported": true
					},
					"comment": {
						"shortText": "Milliseconds in a Second"
					},
					"sources": [
						{
							"fileName": "src/types/datetime/time.span.ts",
							"line": 80,
							"character": 32
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "1000"
				},
				{
					"id": 997,
					"name": "MinutesPerDay",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExported": true
					},
					"comment": {
						"shortText": "how much Minutes have one Day"
					},
					"sources": [
						{
							"fileName": "src/types/datetime/time.span.ts",
							"line": 88,
							"character": 24
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "TimeSpan.HoursPerDay * 60"
				},
				{
					"id": 1000,
					"name": "MinutesPerHour",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExported": true
					},
					"comment": {
						"shortText": "Minutes in one Hour"
					},
					"sources": [
						{
							"fileName": "src/types/datetime/time.span.ts",
							"line": 100,
							"character": 25
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "60"
				},
				{
					"id": 998,
					"name": "SecondsPerDay",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExported": true
					},
					"comment": {
						"shortText": "how much Seconds have one Day"
					},
					"sources": [
						{
							"fileName": "src/types/datetime/time.span.ts",
							"line": 92,
							"character": 24
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "TimeSpan.MinutesPerDay * 60"
				},
				{
					"id": 1001,
					"name": "SecondsPerHour",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExported": true
					},
					"comment": {
						"shortText": "Seconds in one Hour"
					},
					"sources": [
						{
							"fileName": "src/types/datetime/time.span.ts",
							"line": 104,
							"character": 25
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "TimeSpan.MinutesPerHour * 60"
				},
				{
					"id": 1003,
					"name": "SecondsPerMinute",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isExported": true
					},
					"comment": {
						"shortText": "Seconds in one Minute"
					},
					"sources": [
						{
							"fileName": "src/types/datetime/time.span.ts",
							"line": 112,
							"character": 27
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "TimeSpan.SecondsPerHour / 60"
				},
				{
					"id": 1005,
					"name": "Day",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "the Days of this TimeSpan"
					},
					"getSignature": [
						{
							"id": 1006,
							"name": "__get",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "the Days of this TimeSpan"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/time.span.ts",
							"line": 121,
							"character": 11
						}
					]
				},
				{
					"id": 1009,
					"name": "Hour",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "the Hour of this TimeSpan"
					},
					"getSignature": [
						{
							"id": 1010,
							"name": "__get",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "the Hour of this TimeSpan"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/time.span.ts",
							"line": 139,
							"character": 12
						}
					]
				},
				{
					"id": 1021,
					"name": "Millisecond",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "the Millisecond of this TimeSpan"
					},
					"getSignature": [
						{
							"id": 1022,
							"name": "__get",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "the Millisecond of this TimeSpan"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/time.span.ts",
							"line": 193,
							"character": 19
						}
					]
				},
				{
					"id": 1013,
					"name": "Minute",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "the Minute of this TimeSpan"
					},
					"getSignature": [
						{
							"id": 1014,
							"name": "__get",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "the Minute of this TimeSpan"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/time.span.ts",
							"line": 157,
							"character": 14
						}
					]
				},
				{
					"id": 1017,
					"name": "Second",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "the Second of this TimeSpan"
					},
					"getSignature": [
						{
							"id": 1018,
							"name": "__get",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "the Second of this TimeSpan"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/time.span.ts",
							"line": 175,
							"character": 14
						}
					]
				},
				{
					"id": 1007,
					"name": "TotalDays",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "the TimeSpan in Days"
					},
					"getSignature": [
						{
							"id": 1008,
							"name": "__get",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "the TimeSpan in Days"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/time.span.ts",
							"line": 128,
							"character": 17
						}
					]
				},
				{
					"id": 1011,
					"name": "TotalHours",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "the TimeSpan in Hours"
					},
					"getSignature": [
						{
							"id": 1012,
							"name": "__get",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "the TimeSpan in Hours"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/time.span.ts",
							"line": 146,
							"character": 18
						}
					]
				},
				{
					"id": 1023,
					"name": "TotalMilliseconds",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "the TimeSpan in Milliseconds"
					},
					"getSignature": [
						{
							"id": 1024,
							"name": "__get",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "the TimeSpan in Milliseconds"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/time.span.ts",
							"line": 200,
							"character": 25
						}
					]
				},
				{
					"id": 1015,
					"name": "TotalMinutes",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "the TimeSpan in Minutes"
					},
					"getSignature": [
						{
							"id": 1016,
							"name": "__get",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "the TimeSpan in Minutes"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/time.span.ts",
							"line": 164,
							"character": 20
						}
					]
				},
				{
					"id": 1019,
					"name": "TotalSeconds",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "the TimeSpan in Seconds"
					},
					"getSignature": [
						{
							"id": 1020,
							"name": "__get",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "the TimeSpan in Seconds"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/time.span.ts",
							"line": 182,
							"character": 20
						}
					]
				},
				{
					"id": 1025,
					"name": "TotalWeeks",
					"kind": 262144,
					"kindString": "Accessor",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "get the Time Span in Weeks"
					},
					"getSignature": [
						{
							"id": 1026,
							"name": "__get",
							"kind": 524288,
							"kindString": "Get signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "get the Time Span in Weeks"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/time.span.ts",
							"line": 211,
							"character": 18
						}
					]
				},
				{
					"id": 1051,
					"name": "Add",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1052,
							"name": "Add",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "add a TimeSpan to this TimeSpan"
							},
							"parameters": [
								{
									"id": 1053,
									"name": "duration",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"id": 994,
										"name": "TimeSpan"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 994,
								"name": "TimeSpan"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/time.span.ts",
							"line": 329,
							"character": 7
						}
					]
				},
				{
					"id": 1054,
					"name": "Equals",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1055,
							"name": "Equals",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "check a TimeSpan of Equality with another TimeSpan"
							},
							"parameters": [
								{
									"id": 1056,
									"name": "duration",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"id": 994,
										"name": "TimeSpan"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/time.span.ts",
							"line": 343,
							"character": 10
						}
					]
				},
				{
					"id": 1065,
					"name": "IsAfter",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1066,
							"name": "IsAfter",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "is the TimeSpan after this TimeSpan"
							},
							"parameters": [
								{
									"id": 1067,
									"name": "duration",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"id": 994,
										"name": "TimeSpan"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/time.span.ts",
							"line": 388,
							"character": 11
						}
					]
				},
				{
					"id": 1062,
					"name": "IsBefore",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1063,
							"name": "IsBefore",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "is the TimeSpan before this TimeSpan"
							},
							"parameters": [
								{
									"id": 1064,
									"name": "duration",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"id": 994,
										"name": "TimeSpan"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/time.span.ts",
							"line": 379,
							"character": 12
						}
					]
				},
				{
					"id": 1057,
					"name": "Negate",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1058,
							"name": "Negate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "negate the current TimeSpan"
							},
							"type": {
								"type": "reference",
								"id": 994,
								"name": "TimeSpan"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/time.span.ts",
							"line": 351,
							"character": 10
						}
					]
				},
				{
					"id": 1059,
					"name": "Subtract",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1060,
							"name": "Subtract",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "subtract a TimeSpan from this TimeSpan"
							},
							"parameters": [
								{
									"id": 1061,
									"name": "duration",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"id": 994,
										"name": "TimeSpan"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 994,
								"name": "TimeSpan"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/time.span.ts",
							"line": 365,
							"character": 12
						}
					]
				},
				{
					"id": 1068,
					"name": "ToString",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 1069,
							"name": "ToString",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "return the TimeSpan as a Chars\nyou can define a Format Chars to format the TimeSpan"
							},
							"parameters": [
								{
									"id": 1070,
									"name": "fmt",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"comment": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/time.span.ts",
							"line": 398,
							"character": 12
						}
					]
				},
				{
					"id": 1045,
					"name": "FromISOString",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExported": true
					},
					"signatures": [
						{
							"id": 1046,
							"name": "FromISOString",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "create TimeSpan from ISO Chars\nFormat is \"Day.Hour:Minute:Second Millisecond\""
							},
							"parameters": [
								{
									"id": 1047,
									"name": "isoStr",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 994,
								"name": "TimeSpan"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/time.span.ts",
							"line": 295,
							"character": 24
						}
					]
				},
				{
					"id": 1041,
					"name": "FromJavaScriptDate",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExported": true
					},
					"signatures": [
						{
							"id": 1042,
							"name": "FromJavaScriptDate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "create a TimeSpan from a JavaScript Date"
							},
							"parameters": [
								{
									"id": 1043,
									"name": "date",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "the JavaScript Date"
									},
									"type": {
										"type": "reference",
										"name": "Date"
									}
								},
								{
									"id": 1044,
									"name": "ignoreDate",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "ignore the Date of the Date instance\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								}
							],
							"type": {
								"type": "reference",
								"id": 994,
								"name": "TimeSpan"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/time.span.ts",
							"line": 278,
							"character": 29
						}
					]
				},
				{
					"id": 1034,
					"name": "FromLuxon",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExported": true
					},
					"signatures": [
						{
							"id": 1035,
							"name": "FromLuxon",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "create TimeSpan from Luxon Object"
							},
							"parameters": [
								{
									"id": 1036,
									"name": "luxon",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {},
									"type": {
										"type": "reference",
										"name": "ILuxonDuration"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 994,
								"name": "TimeSpan"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/time.span.ts",
							"line": 246,
							"character": 20
						}
					]
				},
				{
					"id": 1048,
					"name": "FromMilliseconds",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExported": true
					},
					"signatures": [
						{
							"id": 1049,
							"name": "FromMilliseconds",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "create TimeSpan from Milliseconds"
							},
							"parameters": [
								{
									"id": 1050,
									"name": "milliseconds",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 994,
								"name": "TimeSpan"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/time.span.ts",
							"line": 304,
							"character": 27
						}
					]
				},
				{
					"id": 1037,
					"name": "FromMoment",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExported": true
					},
					"signatures": [
						{
							"id": 1038,
							"name": "FromMoment",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "create a new TimeSpan from a moment js instance"
							},
							"parameters": [
								{
									"id": 1039,
									"name": "moment",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "the moment js instance"
									},
									"type": {
										"type": "reference",
										"name": "IMomentInstance"
									}
								},
								{
									"id": 1040,
									"name": "ignoreDate",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"comment": {
										"text": "ignore the Date of the moment instance\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								}
							],
							"type": {
								"type": "reference",
								"id": 994,
								"name": "TimeSpan"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/types/datetime/time.span.ts",
							"line": 261,
							"character": 21
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						1027
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						996,
						999,
						1002,
						1004,
						995,
						997,
						1000,
						998,
						1001,
						1003
					]
				},
				{
					"title": "Accessors",
					"kind": 262144,
					"children": [
						1005,
						1009,
						1021,
						1013,
						1017,
						1007,
						1011,
						1023,
						1015,
						1019,
						1025
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						1051,
						1054,
						1065,
						1062,
						1057,
						1059,
						1068,
						1045,
						1041,
						1034,
						1048,
						1037
					]
				}
			],
			"sources": [
				{
					"fileName": "src/types/datetime/time.span.ts",
					"line": 70,
					"character": 21
				}
			]
		},
		{
			"id": 198,
			"name": "IBackgroundWorker",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "the Structure of a Background Worker"
			},
			"typeParameter": [
				{
					"id": 199,
					"name": "T",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {
						"isExported": true
					}
				},
				{
					"id": 200,
					"name": "K",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {
						"isExported": true
					}
				}
			],
			"children": [
				{
					"id": 203,
					"name": "OnError",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/pattern/background.worker/worker.interface.ts",
							"line": 21,
							"character": 11
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "Error"
							}
						],
						"name": "Subject"
					}
				},
				{
					"id": 202,
					"name": "OnFinish",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/pattern/background.worker/worker.interface.ts",
							"line": 20,
							"character": 12
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "typeParameter",
								"name": "K"
							}
						],
						"name": "Subject"
					}
				},
				{
					"id": 201,
					"name": "WorkPath",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/pattern/background.worker/worker.interface.ts",
							"line": 19,
							"character": 12
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 204,
					"name": "Run",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 205,
							"name": "Run",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"parameters": [
								{
									"id": 206,
									"name": "args",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true,
										"isOptional": true
									},
									"type": {
										"type": "typeParameter",
										"name": "T"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/pattern/background.worker/worker.interface.ts",
							"line": 22,
							"character": 7
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						203,
						202,
						201
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						204
					]
				}
			],
			"sources": [
				{
					"fileName": "src/pattern/background.worker/worker.interface.ts",
					"line": 18,
					"character": 34
				}
			],
			"implementedBy": [
				{
					"type": "reference",
					"id": 602,
					"name": "BackgroundWorker"
				},
				{
					"type": "reference",
					"id": 602,
					"name": "BackgroundWorker"
				}
			]
		},
		{
			"id": 632,
			"name": "IDisposable",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "implements Methods to make a Class Disposable"
			},
			"children": [
				{
					"id": 633,
					"name": "Dispose",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 634,
							"name": "Dispose",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/pattern/dispose/disposable.ts",
							"line": 7,
							"character": 11
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						633
					]
				}
			],
			"sources": [
				{
					"fileName": "src/pattern/dispose/disposable.ts",
					"line": 6,
					"character": 28
				}
			]
		},
		{
			"id": 708,
			"name": "IThrottleOptions",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "the Settings Object for the throttle Method"
			},
			"children": [
				{
					"id": 710,
					"name": "Leading",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "execute the Function on begin of the timeout or at the end"
					},
					"sources": [
						{
							"fileName": "src/pattern/functions/throttle.ts",
							"line": 14,
							"character": 11
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 709,
					"name": "Timeout",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "wait for (n) milliseconds to let execute the function again"
					},
					"sources": [
						{
							"fileName": "src/pattern/functions/throttle.ts",
							"line": 10,
							"character": 11
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						710,
						709
					]
				}
			],
			"sources": [
				{
					"fileName": "src/pattern/functions/throttle.ts",
					"line": 6,
					"character": 33
				}
			]
		},
		{
			"id": 1287,
			"name": "IValidationError",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "the Structure of a Validation Error"
			},
			"children": [
				{
					"id": 1288,
					"name": "Message",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "the Error Message String"
					},
					"sources": [
						{
							"fileName": "src/utils/class.validator.ts",
							"line": 26,
							"character": 11
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						1288
					]
				}
			],
			"sources": [
				{
					"fileName": "src/utils/class.validator.ts",
					"line": 22,
					"character": 33
				}
			]
		},
		{
			"id": 194,
			"name": "IWorkerInput",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "the execution Context of a Background Worker"
			},
			"typeParameter": [
				{
					"id": 195,
					"name": "T",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {
						"isExported": true
					}
				}
			],
			"children": [
				{
					"id": 197,
					"name": "data",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/pattern/background.worker/worker.interface.ts",
							"line": 10,
							"character": 8
						}
					],
					"type": {
						"type": "typeParameter",
						"name": "T"
					}
				},
				{
					"id": 196,
					"name": "scriptPath",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/pattern/background.worker/worker.interface.ts",
							"line": 9,
							"character": 14
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						197,
						196
					]
				}
			],
			"sources": [
				{
					"fileName": "src/pattern/background.worker/worker.interface.ts",
					"line": 8,
					"character": 29
				}
			]
		},
		{
			"id": 711,
			"name": "throttle",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "throttle the function execution",
				"tags": [
					{
						"tag": "param",
						"text": "the options to control the execution",
						"param": "options"
					},
					{
						"tag": "param",
						"text": "the Function to throttle\n",
						"param": "fn"
					}
				]
			},
			"sources": [
				{
					"fileName": "src/pattern/functions/throttle.ts",
					"line": 25,
					"character": 21
				}
			],
			"type": {
				"type": "reference",
				"name": "(Anonymous function)"
			},
			"defaultValue": "(function () {\r\n    let locked = false;\r\n    return function (options: IThrottleOptions, fn: (...args) => any, ...args: any) {\r\n        if (!locked) {\r\n            options.Timeout = options.Timeout || 500;\r\n            options.Leading = options.Leading === true;\r\n            if (options.Leading === true) {\r\n                fn.call(fn, ...args);\r\n            }\r\n            setTimeout(() => {\r\n                if (!options.Leading) {\r\n                    fn.call(fn, ...args);\r\n                }\r\n                locked = false;\r\n            }, options.Timeout);\r\n        }\r\n    }\r\n})()"
		},
		{
			"id": 1644,
			"name": "ArrayNotEmpty",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 1645,
					"name": "ArrayNotEmpty",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "check if the Array not Empty"
					},
					"parameters": [
						{
							"id": 1646,
							"name": "validationMessage",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "(Anonymous function)"
					}
				}
			],
			"sources": [
				{
					"fileName": "src/utils/class.validator.ts",
					"line": 706,
					"character": 29
				}
			]
		},
		{
			"id": 1625,
			"name": "Blacklist",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 1626,
					"name": "Blacklist",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "implements a Blacklist check for the Property"
					},
					"parameters": [
						{
							"id": 1627,
							"name": "value",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"comment": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						},
						{
							"id": 1628,
							"name": "validationMessage",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "(Anonymous function)"
					}
				}
			],
			"sources": [
				{
					"fileName": "src/utils/class.validator.ts",
					"line": 634,
					"character": 25
				}
			]
		},
		{
			"id": 1606,
			"name": "CustomValidation",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 1607,
					"name": "CustomValidation",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "can execute a Function that returns true or false, can perform any Validation you want"
					},
					"parameters": [
						{
							"id": 1608,
							"name": "value",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"comment": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1609,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1610,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {
												"isExported": true
											},
											"parameters": [
												{
													"id": 1611,
													"name": "v",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isExported": true
													},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "src/utils/class.validator.ts",
											"line": 574,
											"character": 39
										}
									]
								}
							}
						},
						{
							"id": 1612,
							"name": "validationMessage",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "(Anonymous function)"
					}
				}
			],
			"sources": [
				{
					"fileName": "src/utils/class.validator.ts",
					"line": 574,
					"character": 32
				}
			]
		},
		{
			"id": 1629,
			"name": "Equals",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 1630,
					"name": "Equals",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "check if the Property Value Equals the given Value using (===)"
					},
					"typeParameter": [
						{
							"id": 1631,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						}
					],
					"parameters": [
						{
							"id": 1632,
							"name": "value",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"comment": {},
							"type": {
								"type": "typeParameter",
								"name": "T"
							}
						},
						{
							"id": 1633,
							"name": "validationMessage",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "(Anonymous function)"
					}
				}
			],
			"sources": [
				{
					"fileName": "src/utils/class.validator.ts",
					"line": 649,
					"character": 22
				}
			]
		},
		{
			"id": 1667,
			"name": "IsAlpha",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 1668,
					"name": "IsAlpha",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "check if the String contains only letters a-z"
					},
					"parameters": [
						{
							"id": 1669,
							"name": "validationMessage",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "(Anonymous function)"
					}
				}
			],
			"sources": [
				{
					"fileName": "src/utils/class.validator.ts",
					"line": 808,
					"character": 23
				}
			]
		},
		{
			"id": 1670,
			"name": "IsAlphanumeric",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 1671,
					"name": "IsAlphanumeric",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "check if the string only contains letters a-z and numbers 0-9"
					},
					"parameters": [
						{
							"id": 1672,
							"name": "validationMessage",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "(Anonymous function)"
					}
				}
			],
			"sources": [
				{
					"fileName": "src/utils/class.validator.ts",
					"line": 822,
					"character": 30
				}
			]
		},
		{
			"id": 1673,
			"name": "IsAscii",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 1674,
					"name": "IsAscii",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "check if the String only contains Ascii Characters"
					},
					"parameters": [
						{
							"id": 1675,
							"name": "validationMessage",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "(Anonymous function)"
					}
				}
			],
			"sources": [
				{
					"fileName": "src/utils/class.validator.ts",
					"line": 836,
					"character": 23
				}
			]
		},
		{
			"id": 1676,
			"name": "IsBase64",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 1677,
					"name": "IsBase64",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "check if the String is a Base64 string"
					},
					"parameters": [
						{
							"id": 1678,
							"name": "validationMessage",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "(Anonymous function)"
					}
				}
			],
			"sources": [
				{
					"fileName": "src/utils/class.validator.ts",
					"line": 850,
					"character": 24
				}
			]
		},
		{
			"id": 1653,
			"name": "IsBooleanString",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 1654,
					"name": "IsBooleanString",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "check if the String has any valid Boolean declaration like",
						"text": "true, false, TRUE, FALSE\n"
					},
					"parameters": [
						{
							"id": 1655,
							"name": "validationMessage",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "(Anonymous function)"
					}
				}
			],
			"sources": [
				{
					"fileName": "src/utils/class.validator.ts",
					"line": 750,
					"character": 31
				}
			]
		},
		{
			"id": 1700,
			"name": "IsByteLength",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 1701,
					"name": "IsByteLength",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "check if the String has the Maximum Bytes Size of the given Value"
					},
					"parameters": [
						{
							"id": 1702,
							"name": "value",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"comment": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 1703,
							"name": "validationMessage",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "(Anonymous function)"
					}
				}
			],
			"sources": [
				{
					"fileName": "src/utils/class.validator.ts",
					"line": 965,
					"character": 28
				}
			]
		},
		{
			"id": 1586,
			"name": "IsDefined",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 1587,
					"name": "IsDefined",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "the Property must have a Valid Value"
					},
					"parameters": [
						{
							"id": 1588,
							"name": "validationMessage",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "(Anonymous function)"
					}
				}
			],
			"sources": [
				{
					"fileName": "src/utils/class.validator.ts",
					"line": 487,
					"character": 25
				}
			]
		},
		{
			"id": 1595,
			"name": "IsEmail",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 1596,
					"name": "IsEmail",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "the String at this Property must be a Email Address"
					},
					"parameters": [
						{
							"id": 1597,
							"name": "validationMessage",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "(Anonymous function)"
					}
				}
			],
			"sources": [
				{
					"fileName": "src/utils/class.validator.ts",
					"line": 529,
					"character": 23
				}
			]
		},
		{
			"id": 1589,
			"name": "IsEmpty",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 1590,
					"name": "IsEmpty",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "the Property must have a Empty value like empty String or null or undefined"
					},
					"parameters": [
						{
							"id": 1591,
							"name": "validationMessage",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "(Anonymous function)"
					}
				}
			],
			"sources": [
				{
					"fileName": "src/utils/class.validator.ts",
					"line": 501,
					"character": 23
				}
			]
		},
		{
			"id": 1713,
			"name": "IsHash",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 1714,
					"name": "IsHash",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "check if the String can be a Hash",
						"text": "supported are all Hashes with 32, 40, 64 and 128 bit size\n\nfor Example MD5, SHA-1, SHA-256, SHA-512, RIPEMD-160, Snefru, GHOST and Whirlpool\n"
					},
					"parameters": [
						{
							"id": 1715,
							"name": "validationMessage",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "(Anonymous function)"
					}
				}
			],
			"sources": [
				{
					"fileName": "src/utils/class.validator.ts",
					"line": 1025,
					"character": 22
				}
			]
		},
		{
			"id": 1679,
			"name": "IsHexColor",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 1680,
					"name": "IsHexColor",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "check if a String is a Hex Color",
						"text": "supported Hex Color with 8 (with Alpha), 6 (Default) or 3 (Short) Characters\n"
					},
					"parameters": [
						{
							"id": 1681,
							"name": "validationMessage",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "(Anonymous function)"
					}
				}
			],
			"sources": [
				{
					"fileName": "src/utils/class.validator.ts",
					"line": 866,
					"character": 26
				}
			]
		},
		{
			"id": 1682,
			"name": "IsHexadecimal",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 1683,
					"name": "IsHexadecimal",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "check if a String is a Hexadecimal String"
					},
					"parameters": [
						{
							"id": 1684,
							"name": "validationMessage",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "(Anonymous function)"
					}
				}
			],
			"sources": [
				{
					"fileName": "src/utils/class.validator.ts",
					"line": 880,
					"character": 29
				}
			]
		},
		{
			"id": 1638,
			"name": "IsInt",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 1639,
					"name": "IsInt",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "check if the given Value is an Integer number"
					},
					"parameters": [
						{
							"id": 1640,
							"name": "validationMessage",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "(Anonymous function)"
					}
				}
			],
			"sources": [
				{
					"fileName": "src/utils/class.validator.ts",
					"line": 678,
					"character": 21
				}
			]
		},
		{
			"id": 1688,
			"name": "IsIp",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 1689,
					"name": "IsIp",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "check if the String is a IP Address"
					},
					"parameters": [
						{
							"id": 1690,
							"name": "validationMessage",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "(Anonymous function)"
					}
				}
			],
			"sources": [
				{
					"fileName": "src/utils/class.validator.ts",
					"line": 908,
					"character": 20
				}
			]
		},
		{
			"id": 1694,
			"name": "IsJSON",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 1695,
					"name": "IsJSON",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "check if the String is a JSON String"
					},
					"parameters": [
						{
							"id": 1696,
							"name": "validationMessage",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "(Anonymous function)"
					}
				}
			],
			"sources": [
				{
					"fileName": "src/utils/class.validator.ts",
					"line": 936,
					"character": 22
				}
			]
		},
		{
			"id": 1697,
			"name": "IsJWT",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 1698,
					"name": "IsJWT",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "check if the String is a JSON Web Token"
					},
					"parameters": [
						{
							"id": 1699,
							"name": "validationMessage",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "(Anonymous function)"
					}
				}
			],
			"sources": [
				{
					"fileName": "src/utils/class.validator.ts",
					"line": 950,
					"character": 21
				}
			]
		},
		{
			"id": 1685,
			"name": "IsMacAddress",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 1686,
					"name": "IsMacAddress",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "check if the String is a MAC Address"
					},
					"parameters": [
						{
							"id": 1687,
							"name": "validationMessage",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "(Anonymous function)"
					}
				}
			],
			"sources": [
				{
					"fileName": "src/utils/class.validator.ts",
					"line": 894,
					"character": 28
				}
			]
		},
		{
			"id": 1704,
			"name": "IsMongoId",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 1705,
					"name": "IsMongoId",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "check if a String is a MongoDb Object Id"
					},
					"parameters": [
						{
							"id": 1706,
							"name": "validationMessage",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "(Anonymous function)"
					}
				}
			],
			"sources": [
				{
					"fileName": "src/utils/class.validator.ts",
					"line": 979,
					"character": 25
				}
			]
		},
		{
			"id": 1650,
			"name": "IsNegative",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 1651,
					"name": "IsNegative",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "check the Value for a Negative number"
					},
					"parameters": [
						{
							"id": 1652,
							"name": "validationMessage",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "(Anonymous function)"
					}
				}
			],
			"sources": [
				{
					"fileName": "src/utils/class.validator.ts",
					"line": 734,
					"character": 26
				}
			]
		},
		{
			"id": 1592,
			"name": "IsNotEmpty",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 1593,
					"name": "IsNotEmpty",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "the Property must can not have a Empty value like empty String or null or undefined"
					},
					"parameters": [
						{
							"id": 1594,
							"name": "validationMessage",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "(Anonymous function)"
					}
				}
			],
			"sources": [
				{
					"fileName": "src/utils/class.validator.ts",
					"line": 515,
					"character": 26
				}
			]
		},
		{
			"id": 1656,
			"name": "IsNumberString",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 1657,
					"name": "IsNumberString",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "check if the String contain Numbers Only"
					},
					"parameters": [
						{
							"id": 1658,
							"name": "validationMessage",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "(Anonymous function)"
					}
				}
			],
			"sources": [
				{
					"fileName": "src/utils/class.validator.ts",
					"line": 764,
					"character": 30
				}
			]
		},
		{
			"id": 1581,
			"name": "IsOptional",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 1582,
					"name": "IsOptional",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "check if the Value is missing and ignore all Validations"
					},
					"type": {
						"type": "reference",
						"name": "(Anonymous function)"
					}
				}
			],
			"sources": [
				{
					"fileName": "src/utils/class.validator.ts",
					"line": 460,
					"character": 26
				}
			]
		},
		{
			"id": 1691,
			"name": "IsPort",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 1692,
					"name": "IsPort",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "check if the String or Number is a Port Number"
					},
					"parameters": [
						{
							"id": 1693,
							"name": "validationMessage",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "(Anonymous function)"
					}
				}
			],
			"sources": [
				{
					"fileName": "src/utils/class.validator.ts",
					"line": 922,
					"character": 22
				}
			]
		},
		{
			"id": 1647,
			"name": "IsPositive",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 1648,
					"name": "IsPositive",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "check the Value for a Positive number"
					},
					"parameters": [
						{
							"id": 1649,
							"name": "validationMessage",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "(Anonymous function)"
					}
				}
			],
			"sources": [
				{
					"fileName": "src/utils/class.validator.ts",
					"line": 720,
					"character": 26
				}
			]
		},
		{
			"id": 1710,
			"name": "IsUUID",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 1711,
					"name": "IsUUID",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "check if a String is a UUID"
					},
					"parameters": [
						{
							"id": 1712,
							"name": "validationMessage",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "(Anonymous function)"
					}
				}
			],
			"sources": [
				{
					"fileName": "src/utils/class.validator.ts",
					"line": 1007,
					"character": 22
				}
			]
		},
		{
			"id": 1707,
			"name": "IsUrl",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 1708,
					"name": "IsUrl",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "check if a String is a valid URL"
					},
					"parameters": [
						{
							"id": 1709,
							"name": "validationMessage",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "(Anonymous function)"
					}
				}
			],
			"sources": [
				{
					"fileName": "src/utils/class.validator.ts",
					"line": 993,
					"character": 21
				}
			]
		},
		{
			"id": 1602,
			"name": "Max",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 1603,
					"name": "Max",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "the numeric Value mut be lower or equal the given Value"
					},
					"parameters": [
						{
							"id": 1604,
							"name": "value",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"comment": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 1605,
							"name": "validationMessage",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "(Anonymous function)"
					}
				}
			],
			"sources": [
				{
					"fileName": "src/utils/class.validator.ts",
					"line": 559,
					"character": 19
				}
			]
		},
		{
			"id": 1663,
			"name": "MaxDate",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 1664,
					"name": "MaxDate",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "check if a DateTime is Before the value"
					},
					"parameters": [
						{
							"id": 1665,
							"name": "value",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"comment": {},
							"type": {
								"type": "reference",
								"id": 1074,
								"name": "DateTime"
							}
						},
						{
							"id": 1666,
							"name": "validationMessage",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "(Anonymous function)"
					}
				}
			],
			"sources": [
				{
					"fileName": "src/utils/class.validator.ts",
					"line": 794,
					"character": 23
				}
			]
		},
		{
			"id": 1617,
			"name": "MaxLength",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 1618,
					"name": "MaxLength",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "the String or Array must have the given Length or lesser"
					},
					"parameters": [
						{
							"id": 1619,
							"name": "value",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"comment": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 1620,
							"name": "validationMessage",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "(Anonymous function)"
					}
				}
			],
			"sources": [
				{
					"fileName": "src/utils/class.validator.ts",
					"line": 604,
					"character": 25
				}
			]
		},
		{
			"id": 1598,
			"name": "Min",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 1599,
					"name": "Min",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "the numeric Value must be greater or Equal the given Value"
					},
					"parameters": [
						{
							"id": 1600,
							"name": "value",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"comment": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 1601,
							"name": "validationMessage",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "(Anonymous function)"
					}
				}
			],
			"sources": [
				{
					"fileName": "src/utils/class.validator.ts",
					"line": 544,
					"character": 19
				}
			]
		},
		{
			"id": 1659,
			"name": "MinDate",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 1660,
					"name": "MinDate",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "check if a DateTime is After the value"
					},
					"parameters": [
						{
							"id": 1661,
							"name": "value",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"comment": {},
							"type": {
								"type": "reference",
								"id": 1074,
								"name": "DateTime"
							}
						},
						{
							"id": 1662,
							"name": "validationMessage",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "(Anonymous function)"
					}
				}
			],
			"sources": [
				{
					"fileName": "src/utils/class.validator.ts",
					"line": 779,
					"character": 23
				}
			]
		},
		{
			"id": 1613,
			"name": "MinLength",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 1614,
					"name": "MinLength",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "the String or Array must have the given Length or more"
					},
					"parameters": [
						{
							"id": 1615,
							"name": "value",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"comment": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 1616,
							"name": "validationMessage",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "(Anonymous function)"
					}
				}
			],
			"sources": [
				{
					"fileName": "src/utils/class.validator.ts",
					"line": 589,
					"character": 25
				}
			]
		},
		{
			"id": 1634,
			"name": "NotEquals",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 1635,
					"name": "NotEquals",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "check if the Property Value Equals the given Value using (!==)"
					},
					"parameters": [
						{
							"id": 1636,
							"name": "value",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"comment": {},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 1637,
							"name": "validationMessage",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "(Anonymous function)"
					}
				}
			],
			"sources": [
				{
					"fileName": "src/utils/class.validator.ts",
					"line": 664,
					"character": 25
				}
			]
		},
		{
			"id": 1583,
			"name": "Required",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 1584,
					"name": "Required",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "check if the Property was in the Object and have a Value"
					},
					"parameters": [
						{
							"id": 1585,
							"name": "validationMessage",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "(Anonymous function)"
					}
				}
			],
			"sources": [
				{
					"fileName": "src/utils/class.validator.ts",
					"line": 473,
					"character": 24
				}
			]
		},
		{
			"id": 1641,
			"name": "UniqueArray",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 1642,
					"name": "UniqueArray",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "check an Array if it has Unique Values"
					},
					"parameters": [
						{
							"id": 1643,
							"name": "validationMessage",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "(Anonymous function)"
					}
				}
			],
			"sources": [
				{
					"fileName": "src/utils/class.validator.ts",
					"line": 692,
					"character": 27
				}
			]
		},
		{
			"id": 1716,
			"name": "ValidateClass",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 1717,
					"name": "ValidateClass",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "validate the Class with a Function"
					},
					"typeParameter": [
						{
							"id": 1718,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						}
					],
					"parameters": [
						{
							"id": 1719,
							"name": "method",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"comment": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1720,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1721,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {
												"isExported": true
											},
											"parameters": [
												{
													"id": 1722,
													"name": "instance",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isExported": true
													},
													"type": {
														"type": "typeParameter",
														"name": "T"
													}
												},
												{
													"id": 1723,
													"name": "validators",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isExported": true
													},
													"type": {
														"type": "query",
														"queryType": {
															"type": "reference",
															"name": "VALIDATIONS"
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "src/utils/class.validator.ts",
											"line": 1041,
											"character": 40
										}
									]
								}
							}
						},
						{
							"id": 1724,
							"name": "validationMessage",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"text": "\n\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "(Anonymous function)"
					}
				}
			],
			"sources": [
				{
					"fileName": "src/utils/class.validator.ts",
					"line": 1041,
					"character": 29
				}
			]
		},
		{
			"id": 1574,
			"name": "ValidateIf",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 1575,
					"name": "ValidateIf",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "only Validate the Property when the check Method returns True"
					},
					"typeParameter": [
						{
							"id": 1576,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						}
					],
					"parameters": [
						{
							"id": 1577,
							"name": "cb",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"comment": {
								"text": "define the check Method\n"
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 1578,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 1579,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {
												"isExported": true
											},
											"parameters": [
												{
													"id": 1580,
													"name": "d",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isExported": true
													},
													"type": {
														"type": "typeParameter",
														"name": "T"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"sources": [
										{
											"fileName": "src/utils/class.validator.ts",
											"line": 449,
											"character": 33
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "(Anonymous function)"
					}
				}
			],
			"sources": [
				{
					"fileName": "src/utils/class.validator.ts",
					"line": 449,
					"character": 26
				}
			]
		},
		{
			"id": 1621,
			"name": "Whitelist",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 1622,
					"name": "Whitelist",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "implements a Whitelist check for the Property"
					},
					"parameters": [
						{
							"id": 1623,
							"name": "value",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"comment": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						},
						{
							"id": 1624,
							"name": "validationMessage",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "(Anonymous function)"
					}
				}
			],
			"sources": [
				{
					"fileName": "src/utils/class.validator.ts",
					"line": 619,
					"character": 25
				}
			]
		},
		{
			"id": 621,
			"name": "create",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 622,
					"name": "create",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "create a Variable and when not defined returns default or null"
					},
					"typeParameter": [
						{
							"id": 623,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						}
					],
					"parameters": [
						{
							"id": 624,
							"name": "initialValue",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"comment": {},
							"type": {
								"type": "typeParameter",
								"name": "T"
							}
						},
						{
							"id": 625,
							"name": "defaultValue",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "typeParameter",
								"name": "T"
							}
						}
					],
					"type": {
						"type": "typeParameter",
						"name": "T"
					}
				}
			],
			"sources": [
				{
					"fileName": "src/pattern/construct.ts",
					"line": 9,
					"character": 22
				}
			]
		},
		{
			"id": 626,
			"name": "createWithFactory",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 627,
					"name": "createWithFactory",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "create a Value with a Factory Method null safe with optional default value"
					},
					"typeParameter": [
						{
							"id": 628,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						}
					],
					"parameters": [
						{
							"id": 629,
							"name": "factoryMethod",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"comment": {
								"text": "the Method that creates the Value"
							},
							"type": {
								"type": "reference",
								"name": "Function"
							}
						},
						{
							"id": 630,
							"name": "args",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"comment": {
								"text": "the Factory Function Arguments"
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						},
						{
							"id": 631,
							"name": "defaultValue",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"text": "\n"
							},
							"type": {
								"type": "typeParameter",
								"name": "T"
							}
						}
					],
					"type": {
						"type": "typeParameter",
						"name": "T"
					}
				}
			],
			"sources": [
				{
					"fileName": "src/pattern/construct.ts",
					"line": 26,
					"character": 33
				}
			]
		},
		{
			"id": 635,
			"name": "using",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 636,
					"name": "using",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "use a Instance and Dispose it after Execution",
						"tags": [
							{
								"tag": "example",
								"text": "\n```typescript\nclass WithDisposable implements IDisposable {\n  Name = 'WithoutDisposable';\n\n  Dispose(): void {\n    this.Name = '';\n  }\n}\nusing(WithDisposable, (i) => {\n  // Do whatever you want to do with the new Instance of the Class\n});\n```\n"
							}
						]
					},
					"typeParameter": [
						{
							"id": 637,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							},
							"type": {
								"type": "reference",
								"id": 632,
								"name": "IDisposable"
							}
						}
					],
					"parameters": [
						{
							"id": 638,
							"name": "item",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"comment": {
								"text": "a instance of a Class to Dispose after running the using section"
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 639,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {
										"isExported": true
									},
									"sources": [
										{
											"fileName": "src/pattern/dispose/using.ts",
											"line": 25,
											"character": 50
										}
									]
								}
							}
						},
						{
							"id": 640,
							"name": "cb",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"comment": {
								"text": "what is to do in this using?\n"
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 641,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {
										"isExported": true
									},
									"signatures": [
										{
											"id": 642,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {
												"isExported": true
											},
											"parameters": [
												{
													"id": 643,
													"name": "d",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isExported": true
													},
													"type": {
														"type": "typeParameter",
														"name": "T",
														"constraint": {
															"type": "reference",
															"id": 632,
															"name": "IDisposable"
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									],
									"sources": [
										{
											"fileName": "src/pattern/dispose/using.ts",
											"line": 25,
											"character": 67
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "void"
					}
				}
			],
			"sources": [
				{
					"fileName": "src/pattern/dispose/using.ts",
					"line": 25,
					"character": 21
				}
			]
		}
	],
	"groups": [
		{
			"title": "Modules",
			"kind": 2,
			"children": [
				232
			]
		},
		{
			"title": "Enumerations",
			"kind": 4,
			"children": [
				289
			],
			"categories": [
				{
					"title": "Type",
					"children": [
						289
					]
				}
			]
		},
		{
			"title": "Classes",
			"kind": 128,
			"children": [
				602,
				1216,
				1222,
				1289,
				1074,
				644,
				693,
				1191,
				1253,
				212,
				957,
				933,
				712,
				1260,
				282,
				1725,
				994
			],
			"categories": [
				{
					"title": "Pattern",
					"children": [
						602,
						693
					]
				},
				{
					"title": "Store",
					"children": [
						933,
						712
					]
				},
				{
					"title": "Type",
					"children": [
						1216,
						1222,
						1074,
						644,
						1191,
						212,
						957,
						282,
						994
					]
				},
				{
					"title": "Util",
					"children": [
						1289,
						1253,
						1260,
						1725
					]
				}
			]
		},
		{
			"title": "Interfaces",
			"kind": 256,
			"children": [
				198,
				632,
				708,
				1287,
				194
			],
			"categories": [
				{
					"title": "Pattern",
					"children": [
						198,
						632,
						708,
						194
					]
				},
				{
					"title": "Validation",
					"children": [
						1287
					]
				}
			]
		},
		{
			"title": "Variables",
			"kind": 32,
			"children": [
				711
			],
			"categories": [
				{
					"title": "Pattern",
					"children": [
						711
					]
				}
			]
		},
		{
			"title": "Functions",
			"kind": 64,
			"children": [
				1644,
				1625,
				1606,
				1629,
				1667,
				1670,
				1673,
				1676,
				1653,
				1700,
				1586,
				1595,
				1589,
				1713,
				1679,
				1682,
				1638,
				1688,
				1694,
				1697,
				1685,
				1704,
				1650,
				1592,
				1656,
				1581,
				1691,
				1647,
				1710,
				1707,
				1602,
				1663,
				1617,
				1598,
				1659,
				1613,
				1634,
				1583,
				1641,
				1716,
				1574,
				1621,
				621,
				626,
				635
			],
			"categories": [
				{
					"title": "Pattern",
					"children": [
						621,
						626,
						635
					]
				},
				{
					"title": "Validation Decorator",
					"children": [
						1644,
						1625,
						1606,
						1629,
						1667,
						1670,
						1673,
						1676,
						1653,
						1700,
						1586,
						1595,
						1589,
						1713,
						1679,
						1682,
						1638,
						1688,
						1694,
						1697,
						1685,
						1704,
						1650,
						1592,
						1656,
						1581,
						1691,
						1647,
						1710,
						1707,
						1602,
						1663,
						1617,
						1598,
						1659,
						1613,
						1634,
						1583,
						1641,
						1716,
						1574,
						1621
					]
				}
			]
		}
	]
}