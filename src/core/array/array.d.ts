export function GetSortValue(v1: any, v2: any): [any, any];
export function Sort<T>(array: T[], columns: string[], orders: boolean[]): T[];
export function GroupBy<T>(array: T[], select: (item: T) => any);
export function Reverse<T>(array: T[]): T[];
export function Find<T>(array: T[], cb: (item: T, idx: number, arr: T[]) => boolean, getIdx?: boolean): T;
export function FindLast<T>(array: T[], cb: (item: T, idx: number, arr: T[]) => boolean, getIdx?: boolean): T;
export function Filter<T>(array: T[], cb: (item: T, idx: number, arr: T[]) => boolean, remove?: boolean): T[];
export function Without<T>(array: T[], elements: T[]): T[];
export function IndexOf<T>(array: T[], element: T, skip?: number): number;
export function OperateArray<T>(array: T[], filter: (item: T, idx: number, arr: T[]) => boolean, operation: number): number;
export function MergeArray<T>(array: T[], index: number, elements: T[]): T[];
export function Slice<T>(array: T[], start: number, end: number): T[];
export function Flat<T>(arr: T[], maxDepth: number, depth: number, result?: T[]);
